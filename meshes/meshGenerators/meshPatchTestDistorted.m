function [nodes, edof] = meshPatchTestDistorted(lengthX, lengthY, lengthZ, order, serendipity)
%MESHPATCHTESTDISTORTED Initially distorted mesh used in the patch test
%   This function returns the nodes and the edof for the initially
%   distorted mesh that is used in the patch test.
%
%   REFERENCE
%   https://doi.org/10.1016/0168-874X(85)90003-4
%
%   AUTHOR(S)
%   Felix Zaehringer

if lengthX ~= 1 || lengthY ~= 1 || lengthZ ~= 1
    error('Not implemented!');
end

if order == 1 && ~serendipity
    nodes = [0, 1, 1, 0, 0, 1, 1, 0, 0.249, 0.826, 0.850, 0.273, 0.320, 0.677, 0.788, 0.165; ...
        0, 0, 1, 1, 0, 0, 1, 1, 0.342, 0.288, 0.649, 0.750, 0.186, 0.305, 0.693, 0.745; ...
        0, 0, 0, 0, 1, 1, 1, 1, 0.192, 0.288, 0.263, 0.230, 0.643, 0.683, 0.644, 0.702]';
    edof = [1, 2, 3, 4, 9, 10, 11, 12; ...
        12, 11, 3, 4, 16, 15, 7, 8; ...
        13, 14, 15, 16, 5, 6, 7, 8; ...
        1, 2, 10, 9, 5, 6, 14, 13; ...
        10, 2, 3, 11, 14, 6, 7, 15; ...
        1, 9, 12, 4, 5, 13, 16, 8; ...
        9, 10, 11, 12, 13, 14, 15, 16];
    %                     bounEdof = struct(...
    %                         'SX1',[4,1,5,8],'SX2',[2,3,7,6],...
    %                         'SY1',[1,2,6,5],'SY2',[3,4,8,7],...
    %                         'SZ1',[4,3,2,1],'SZ2',[5,6,7,8]);
elseif order == 2 && serendipity
    nodes = [0, 0, 0; ... %1
        1, 0, 0; ... %2
        1, 1, 0; ... %3
        0, 1, 0; ... %4
        0, 0, 1; ... %5
        1, 0, 1; ... %6
        1, 1, 1; ... %7
        0, 1, 1; ... %8
        0.249, 0.342, 0.192; ... %9
        0.826, 0.288, 0.288; ... %10
        0.850, 0.649, 0.263; ... %11
        0.273, 0.750, 0.230; ... %12
        0.320, 0.186, 0.643; ... %13
        0.677, 0.305, 0.683; ... %14
        0.788, 0.693, 0.644; ... %15
        0.165, 0.745, 0.702; ... %16
        0.5, 0, 0; ... %17
        1, 0.5, 0; ... %18
        0.5, 1, 0; ... %19
        0, 0.5, 0; ... %20
        0.5, 0, 1; ... %21
        1, 0.5, 1; ... %22
        0.5, 1, 1; ... %23
        0, 0.5, 1; ... %24
        0, 0, 0.5; ... %25
        1, 0, 0.5; ... %26
        1, 1, 0.5; ... %27
        0, 1, 0.5; ... %28
        0.16, 0.093, 0.8215; ... %29
        0.8385, 0.1525, 0.8415; ...
        0.9130, 0.1440, 0.1440; ...
        0.1245, 0.1710, 0.0960; ...
        0.7515, 0.2965, 0.4855; ...
        0.5375, 0.3150, 0.2400; ...
        0.2845, 0.2640, 0.4175; ...
        0.4985, 0.2455, 0.6630; ...
        0.8380, 0.4685, 0.2755; ...
        0.2610, 0.5460, 0.2110; ...
        0.2425, 0.4655, 0.6725; ...
        0.7325, 0.4990, 0.6635; ... %40
        0.8190, 0.6710, 0.4535; ...
        0.5615, 0.6995, 0.2465; ...
        0.2190, 0.7475, 0.4660; ...
        0.4765, 0.7190, 0.6730; ...
        0.8940, 0.8465, 0.8220; ...
        0.9250, 0.8245, 0.1315; ...
        0.1365, 0.8750, 0.1150; ...
        0.0825, 0.8725, 0.8510]; %48
    edof = [1, 2, 3, 4, 9, 10, 11, 12, 17, 18, 19, 20, 34, 37, 42, 38, 32, 31, 46, 47; ...
        16, 15, 11, 12, 8, 7, 3, 4, 44, 41, 42, 43, 23, 27, 19, 28, 48, 45, 46, 47; ...
        16, 8, 5, 13, 15, 7, 6, 14, 48, 24, 29, 39, 45, 22, 30, 40, 44, 23, 21, 36; ...
        9, 13, 5, 1, 10, 14, 6, 2, 35, 29, 25, 32, 33, 30, 26, 31, 34, 36, 21, 17; ...
        11, 15, 14, 10, 3, 7, 6, 2, 41, 40, 33, 37, 27, 22, 26, 18, 46, 45, 30, 31; ...
        4, 8, 5, 1, 12, 16, 13, 9, 28, 24, 25, 20, 43, 39, 35, 38, 47, 48, 29, 32; ...
        12, 16, 13, 9, 11, 15, 14, 10, 43, 39, 35, 38, 41, 40, 33, 37, 42, 44, 36, 34];
else
    error('Not implemented!')
end
end

function [rData, kData, elementEnergy, array] = displacementPetrovGalerkinZhouEtAl2017HookeEndpoint(obj, setupObject, computePostData, e, rData, kData, dofs, array, stressTensor, flagNumericalTangent)
% DISPLACEMENTPETROVGALERKINZHOUETAL2017HOOKEENDPOINT Element routine of class solidClass.
%
% FORMULATION
% This is a 'displacement'-based finite element routine covering linear
% mechanical processes employing a homogenous, linear-elastic, isotropic
% 'Hooke' material model (linear geometric and linear material/
% stress-strain relation).
% The formulation employs different shape functions for trial and test
% function ('PetrovGalerkin') and is suitable for static simulations.
% Another name of this element is US-ATFH8, where US denotes the unsymmetry of
% the stiffness matrix.
%
% CALL
% displacementPetrovGalerkinZhouEtAl2017HookeEndpoint(obj, setupObject, computePostData, e, rData, kData, dofs, array, stressTensor, flagNumericalTangent)
% obj: The first argument is expected to be an object of type solidClass,
%      e.g. solidObject.
% setupObject: The second argument is expected to be an object of type
%              setupClass, e.g. setupObject which contains information like
%              time step size or plotting information.
% computePostData: Logical data type which is true for computing stress
%                  only and false for computing residual and tangent.
% e: current element number
% rData: cell-array of size [1, 1] for residual data.
% kData: cell-array of size [1, 1] for tangent data.
% dofs: degrees of freedom (dofs) optionally manipulated data (numerical
%       tangent)
% array: structure for storage fe-data, for more information see
%        storageFEObject.initializeArrayStress
% stressTensor: structure for storage stress tensors (postprocessing), for
%               more information see storageFEObject.initializeArrayStress
% flagNumericalTangent: flag that indicates whether the function call
%                       happens during the computation of the numerical
%                       tangent or not.
%
% REFERENCE
% https://doi.org/10.1002/nme.5318
%
% SEE ALSO
% -
%
% CREATOR(S)
% Jakob Hammes, Felix Zaehringer

%% SETUP
% load objects
shapeFunctionObject = obj.shapeFunctionObject;
materialObject = obj.materialObject;
meshObject = obj.meshObject;

% aquire general data
N_k_I = shapeFunctionObject.N_k_I;
dN_xi_k_I = shapeFunctionObject.dN_xi_k_I;
dN0_xi_I = shapeFunctionObject.dN0_xi_I;

numberOfGausspoints = shapeFunctionObject.numberOfGausspoints;
gaussPoints = shapeFunctionObject.gaussPoint;
gaussWeight = shapeFunctionObject.gaussWeight;

edof = meshObject.edof;
dimension = obj.dimension;

% aquire material data (Note: defined different in paper)
lambda = materialObject.lambda;
mu = materialObject.mu;
C = [lambda + 2 * mu, lambda, lambda, 0, 0, 0; ...
    lambda, lambda + 2 * mu, lambda, 0, 0, 0; ...
    lambda, lambda, lambda + 2 * mu, 0, 0, 0; ...
    0, 0, 0, mu, 0, 0; ...
    0, 0, 0, 0, mu, 0; ...
    0, 0, 0, 0, 0, mu];

% aquire the nodal values of the variables for the current element
X = obj.qR(edof(e, :), 1:dimension).';
x = dofs.edN1;
uN1 = x(:) - X(:);

% compute Jacobian matrices
J0 = X * dN0_xi_I';
JAll = computeJacobianForAllGausspoints(X, dN_xi_k_I);

J0InvT = inv(J0.');
detJ0 = det(J0);

% initialize residual
Re = rData{1};

% initialize tangent
Ke = kData{1, 1};

% initialize elementEnergy
elementEnergy.strainEnergy = 0;

% compute skew coordinates of nodal points / gauss points
numberOfNodes = size(N_k_I, 2);
nodalPointsInLocalCoordinates = elementNodesInLocalCoordinates(dimension, obj.elementGeometryType, numberOfNodes);
gaussPointsInSkewCoordinates = computeSkewCoordinates(gaussPoints, X, J0, shapeFunctionObject);
nodalPointsInSkewCoordinates = computeSkewCoordinates(nodalPointsInLocalCoordinates, X, J0, shapeFunctionObject);

% compute F0 matrix
F0 = F0Matrix(3, J0);

% further parameters
a1 = detJ0 * J0InvT(1, 1); a2 = detJ0 * J0InvT(1, 2); a3 = detJ0 * J0InvT(1, 3);
b1 = detJ0 * J0InvT(2, 1); b2 = detJ0 * J0InvT(2, 2); b3 = detJ0 * J0InvT(2, 3);
c1 = detJ0 * J0InvT(3, 1); c2 = detJ0 * J0InvT(3, 2); c3 = detJ0 * J0InvT(3, 3);

A13 = C \ F0(:, 2);
A14 = C \ F0(:, 3);
A15 = C \ F0(:, 5);
A16 = C \ F0(:, 1);
A17 = C \ F0(:, 3);
A18 = C \ F0(:, 6);
A19 = C \ F0(:, 1);
A20 = C \ F0(:, 2);
A21 = C \ F0(:, 4);

% compute dHat matrix
dHat = computeDHatMatrix(nodalPointsInSkewCoordinates, J0, detJ0, A13, A14, A15, A16, A17, A18, A19, A20, A21);

%% GAUSS LOOP
for k = 1:numberOfGausspoints
    [J, detJ] = extractJacobianForGausspoint(JAll, k, setupObject, dimension);
    dN_X_I = computedN_X_I(dN_xi_k_I, J, k);

    % gauss points in skew coordinates
    R = gaussPointsInSkewCoordinates(1, k);
    S = gaussPointsInSkewCoordinates(2, k);
    T = gaussPointsInSkewCoordinates(3, k);

    % compute PTilde matrix
    eps13Voigt = A13*R;
    eps14Voigt = A14*R;
    eps15Voigt = A15*R;
    eps16Voigt = A16*S;
    eps17Voigt = A17*S;
    eps18Voigt = A18*S;
    eps19Voigt = A19*T;
    eps20Voigt = A20*T;
    eps21Voigt = A21*T;
    
    u_a = 1/detJ0*(a1*S*T +a2*R*T +a3*R*S);
    u_b = 1/detJ0*(b1*S*T +b2*R*T +b3*R*S);
    u_c = 1/detJ0*(c1*S*T +c2*R*T +c3*R*S);
    
    PTilde = [0 0 0 a1/detJ0 0        0        a2/detJ0 0        0          a3/detJ0 0        0        eps13Voigt(1) eps14Voigt(1) eps15Voigt(1) eps16Voigt(1) eps17Voigt(1) eps18Voigt(1) eps19Voigt(1) eps20Voigt(1) eps21Voigt(1) u_a 0   0;
              0 0 0 0        b1/detJ0 0        0        b2/detJ0 0          0        b3/detJ0 0        eps13Voigt(2) eps14Voigt(2) eps15Voigt(2) eps16Voigt(2) eps17Voigt(2) eps18Voigt(2) eps19Voigt(2) eps20Voigt(2) eps21Voigt(2) 0   u_b 0;
              0 0 0 0        0        c1/detJ0 0        0        c2/detJ0   0        0        c3/detJ0 eps13Voigt(3) eps14Voigt(3) eps15Voigt(3) eps16Voigt(3) eps17Voigt(3) eps18Voigt(3) eps19Voigt(3) eps20Voigt(3) eps21Voigt(3) 0   0   u_c;
              0 0 0 b1/detJ0 a1/detJ0 0        b2/detJ0 a2/detJ0 0          b3/detJ0 a3/detJ0 0        eps13Voigt(4) eps14Voigt(4) eps15Voigt(4) eps16Voigt(4) eps17Voigt(4) eps18Voigt(4) eps19Voigt(4) eps20Voigt(4) eps21Voigt(4) u_b u_a 0;
              0 0 0 0        c1/detJ0 b1/detJ0 0        c2/detJ0 b2/detJ0   0        c3/detJ0 b3/detJ0 eps13Voigt(5) eps14Voigt(5) eps15Voigt(5) eps16Voigt(5) eps17Voigt(5) eps18Voigt(5) eps19Voigt(5) eps20Voigt(5) eps21Voigt(5) 0   u_c u_b;
              0 0 0 c1/detJ0 0        a1/detJ0 c2/detJ0 0        a2/detJ0   c3/detJ0 0        a3/detJ0 eps13Voigt(6) eps14Voigt(6) eps15Voigt(6) eps16Voigt(6) eps17Voigt(6) eps18Voigt(6) eps19Voigt(6) eps20Voigt(6) eps21Voigt(6) u_c 0   u_a];
    
    % nodal operator matrix & approximation matrix
    B = BMatrix(dN_X_I);
    BHat = PTilde / dHat;

    if ~computePostData
        % TANGENT
        Ke = Ke + (B.' * C * BHat) * detJ * gaussWeight(k); 

        % ENERGY
        elementEnergy.strainEnergy = elementEnergy.strainEnergy + 1 / 2 * (BHat * uN1).' * C * (BHat * uN1) * detJ * gaussWeight(k);
    else
        % STRESS COMPUTATION
        sigmaVoigt = C * BHat * uN1;
        sigma = voigtToMatrix(sigmaVoigt, 'stress');
        stressTensor.Cauchy = sigma;
        array = postStressComputation(array, N_k_I, k, gaussWeight, detJ, stressTensor, setupObject, dimension);
    end
end

%% RESIDUAL
Re = Re + Ke * uN1;

%% PASS COMPUTATION DATA
if ~computePostData
    rData{1} = Re;
    kData{1, 1} = Ke;
end
end

function dHat = computeDHatMatrix(nodalPointsInSkewCoordinates, J0, detJ0, A13, A14, A15, A16, A17, A18, A19, A20, A21)
R = nodalPointsInSkewCoordinates(1, :);
S = nodalPointsInSkewCoordinates(2, :);
T = nodalPointsInSkewCoordinates(3, :);

J011 = J0(1,1); J012 = J0(1,2); J013 = J0(1,3);
J021 = J0(2,1); J022 = J0(2,2); J023 = J0(2,3);
J031 = J0(3,1); J032 = J0(3,2); J033 = J0(3,3);

U13 = (R.^2*(A13(1)*J011^2*J022*J033 - A13(1)*J011^2*J023*J032 - A13(2)*J021^2*J022*J033 + A13(2)*J021^2*J023*J032 - A13(4)*J012*J021^2*J033 + A13(4)*J013*J021^2*J032 - A13(3)*J022*J031^2*J033 + A13(3)*J023*J031^2*J032 + A13(6)*J012*J023*J031^2 - A13(6)*J013*J022*J031^2 - 2*A13(1)*J011*J012*J021*J033 + 2*A13(1)*J011*J012*J023*J031 + 2*A13(1)*J011*J013*J021*J032 - 2*A13(1)*J011*J013*J022*J031 + A13(4)*J012*J021*J023*J031 - A13(4)*J013*J021*J022*J031 - A13(5)*J021*J022*J031*J033 + A13(5)*J021*J023*J031*J032 - A13(6)*J012*J021*J031*J033 + A13(6)*J013*J021*J031*J032))/(2*detJ0) - (R.*S.*(2*A13(1)*J012^2*J021*J033 - 2*A13(1)*J012^2*J023*J031 + 2*A13(2)*J021*J022^2*J033 + A13(4)*J013*J022^2*J031 - 2*A13(3)*J023*J031*J032^2 - A13(5)*J021*J023*J032^2 - A13(6)*J013*J021*J032^2 + A13(5)*J022^2*J031*J033 - 2*A13(1)*J012*J013*J021*J032 + 2*A13(1)*J012*J013*J022*J031 - 2*A13(2)*J021*J022*J023*J032 + 2*A13(4)*J012*J021*J022*J033 - A13(4)*J012*J021*J023*J032 - A13(4)*J012*J022*J023*J031 - A13(4)*J013*J021*J022*J032 + 2*A13(3)*J022*J031*J032*J033 + A13(5)*J021*J022*J032*J033 - A13(5)*J022*J023*J031*J032 + A13(6)*J012*J021*J032*J033 + A13(6)*J012*J022*J031*J033 - 2*A13(6)*J012*J023*J031*J032 + A13(6)*J013*J022*J031*J032))/(2*detJ0) + (R.*T.*(2*A13(1)*J013^2*J021*J032 - 2*A13(1)*J013^2*J022*J031 + 2*A13(2)*J021*J023^2*J032 + A13(4)*J012*J023^2*J031 - 2*A13(3)*J022*J031*J033^2 - A13(5)*J021*J022*J033^2 - A13(6)*J012*J021*J033^2 + A13(5)*J023^2*J031*J032 - 2*A13(1)*J012*J013*J021*J033 + 2*A13(1)*J012*J013*J023*J031 - 2*A13(2)*J021*J022*J023*J033 - A13(4)*J012*J021*J023*J033 - A13(4)*J013*J021*J022*J033 + 2*A13(4)*J013*J021*J023*J032 - A13(4)*J013*J022*J023*J031 + 2*A13(3)*J023*J031*J032*J033 + A13(5)*J021*J023*J032*J033 - A13(5)*J022*J023*J031*J033 + A13(6)*J012*J023*J031*J033 + A13(6)*J013*J021*J032*J033 - 2*A13(6)*J013*J022*J031*J033 + A13(6)*J013*J023*J031*J032))/(2*detJ0) - (S.^2*(J022*J033 - J023*J032)*(A13(1)*J012^2 + A13(4)*J012*J022 + A13(6)*J012*J032 + A13(2)*J022^2 + A13(5)*J022*J032 + A13(3)*J032^2))/(2*detJ0) - (T.^2*(J022*J033 - J023*J032)*(A13(1)*J013^2 + A13(4)*J013*J023 + A13(6)*J013*J033 + A13(2)*J023^2 + A13(5)*J023*J033 + A13(3)*J033^2))/(2*detJ0) - (S.*T.*(J022*J033 - J023*J032)*(2*A13(1)*J012*J013 + 2*A13(2)*J022*J023 + A13(4)*J012*J023 + A13(4)*J013*J022 + 2*A13(3)*J032*J033 + A13(5)*J022*J033 + A13(5)*J023*J032 + A13(6)*J012*J033 + A13(6)*J013*J032))/(2*detJ0);
V13 = ((A13(1)*J011^2*J012*J033 - A13(1)*J011^2*J013*J032 - A13(2)*J012*J021^2*J033 + A13(2)*J013*J021^2*J032 + A13(3)*J012*J031^2*J033 - A13(3)*J013*J031^2*J032 + A13(4)*J011^2*J022*J033 - A13(4)*J011^2*J023*J032 + A13(5)*J012*J023*J031^2 - A13(5)*J013*J022*J031^2 + 2*A13(2)*J011*J021*J022*J033 - 2*A13(2)*J011*J021*J023*J032 + 2*A13(2)*J012*J021*J023*J031 - 2*A13(2)*J013*J021*J022*J031 + A13(4)*J011*J012*J023*J031 - A13(4)*J011*J013*J022*J031 + A13(5)*J011*J022*J031*J033 - A13(5)*J011*J023*J031*J032 + A13(6)*J011*J012*J031*J033 - A13(6)*J011*J013*J031*J032)*R.^2)/(2*detJ0) + ((2*A13(1)*J011*J012^2*J033 + 2*A13(2)*J011*J022^2*J033 - 2*A13(2)*J013*J022^2*J031 - 2*A13(3)*J013*J031*J032^2 + A13(4)*J012^2*J023*J031 - A13(5)*J011*J023*J032^2 - A13(6)*J011*J013*J032^2 + A13(6)*J012^2*J031*J033 - 2*A13(1)*J011*J012*J013*J032 - 2*A13(2)*J011*J022*J023*J032 + 2*A13(2)*J012*J022*J023*J031 + 2*A13(4)*J011*J012*J022*J033 - A13(4)*J011*J012*J023*J032 - A13(4)*J011*J013*J022*J032 - A13(4)*J012*J013*J022*J031 + 2*A13(3)*J012*J031*J032*J033 + A13(5)*J011*J022*J032*J033 + A13(5)*J012*J022*J031*J033 + A13(5)*J012*J023*J031*J032 - 2*A13(5)*J013*J022*J031*J032 + A13(6)*J011*J012*J032*J033 - A13(6)*J012*J013*J031*J032)*R.*S)/(2*detJ0) - ((2*A13(1)*J011*J013^2*J032 + 2*A13(2)*J011*J023^2*J032 - 2*A13(2)*J012*J023^2*J031 - 2*A13(3)*J012*J031*J033^2 + A13(4)*J013^2*J022*J031 - A13(5)*J011*J022*J033^2 - A13(6)*J011*J012*J033^2 + A13(6)*J013^2*J031*J032 - 2*A13(1)*J011*J012*J013*J033 - 2*A13(2)*J011*J022*J023*J033 + 2*A13(2)*J013*J022*J023*J031 - A13(4)*J011*J012*J023*J033 - A13(4)*J011*J013*J022*J033 + 2*A13(4)*J011*J013*J023*J032 - A13(4)*J012*J013*J023*J031 + 2*A13(3)*J013*J031*J032*J033 + A13(5)*J011*J023*J032*J033 - 2*A13(5)*J012*J023*J031*J033 + A13(5)*J013*J022*J031*J033 + A13(5)*J013*J023*J031*J032 + A13(6)*J011*J013*J032*J033 - A13(6)*J012*J013*J031*J033)*R.*T)/(2*detJ0) + ((J012*J033 - J013*J032)*(A13(1)*J012^2 + A13(4)*J012*J022 + A13(6)*J012*J032 + A13(2)*J022^2 + A13(5)*J022*J032 + A13(3)*J032^2)*S.^2)/(2*detJ0) + ((J012*J033 - J013*J032)*(2*A13(1)*J012*J013 + 2*A13(2)*J022*J023 + A13(4)*J012*J023 + A13(4)*J013*J022 + 2*A13(3)*J032*J033 + A13(5)*J022*J033 + A13(5)*J023*J032 + A13(6)*J012*J033 + A13(6)*J013*J032)*S.*T)/(2*detJ0) + ((J012*J033 - J013*J032)*(A13(1)*J013^2 + A13(4)*J013*J023 + A13(6)*J013*J033 + A13(2)*J023^2 + A13(5)*J023*J033 + A13(3)*J033^2)*T.^2)/(2*detJ0);
W13 = (R.*T.*(2*A13(1)*J011*J013^2*J022 - 2*A13(2)*J012*J021*J023^2 - A13(4)*J011*J012*J023^2 + 2*A13(3)*J011*J022*J033^2 - 2*A13(3)*J012*J021*J033^2 + A13(4)*J013^2*J021*J022 - A13(5)*J011*J023^2*J032 + A13(6)*J013^2*J021*J032 - 2*A13(1)*J011*J012*J013*J023 + 2*A13(2)*J013*J021*J022*J023 + A13(4)*J011*J013*J022*J023 - A13(4)*J012*J013*J021*J023 - 2*A13(3)*J011*J023*J032*J033 + 2*A13(3)*J013*J021*J032*J033 + A13(5)*J011*J022*J023*J033 - 2*A13(5)*J012*J021*J023*J033 + A13(5)*J013*J021*J022*J033 + A13(5)*J013*J021*J023*J032 - A13(6)*J011*J012*J023*J033 + 2*A13(6)*J011*J013*J022*J033 - A13(6)*J011*J013*J023*J032 - A13(6)*J012*J013*J021*J033))/(2*detJ0) - (R.*S.*(2*A13(1)*J011*J012^2*J023 - 2*A13(2)*J013*J021*J022^2 - A13(4)*J011*J013*J022^2 + 2*A13(3)*J011*J023*J032^2 - 2*A13(3)*J013*J021*J032^2 + A13(4)*J012^2*J021*J023 - A13(5)*J011*J022^2*J033 + A13(6)*J012^2*J021*J033 - 2*A13(1)*J011*J012*J013*J022 + 2*A13(2)*J012*J021*J022*J023 + A13(4)*J011*J012*J022*J023 - A13(4)*J012*J013*J021*J022 - 2*A13(3)*J011*J022*J032*J033 + 2*A13(3)*J012*J021*J032*J033 + A13(5)*J011*J022*J023*J032 + A13(5)*J012*J021*J022*J033 + A13(5)*J012*J021*J023*J032 - 2*A13(5)*J013*J021*J022*J032 - A13(6)*J011*J012*J022*J033 + 2*A13(6)*J011*J012*J023*J032 - A13(6)*J011*J013*J022*J032 - A13(6)*J012*J013*J021*J032))/(2*detJ0) - (R.^2*(A13(1)*J011^2*J012*J023 - A13(1)*J011^2*J013*J022 + A13(2)*J012*J021^2*J023 - A13(2)*J013*J021^2*J022 - A13(3)*J012*J023*J031^2 + A13(3)*J013*J022*J031^2 + A13(5)*J012*J021^2*J033 - A13(5)*J013*J021^2*J032 - A13(6)*J011^2*J022*J033 + A13(6)*J011^2*J023*J032 + A13(4)*J011*J012*J021*J023 - A13(4)*J011*J013*J021*J022 - 2*A13(3)*J011*J022*J031*J033 + 2*A13(3)*J011*J023*J031*J032 + 2*A13(3)*J012*J021*J031*J033 - 2*A13(3)*J013*J021*J031*J032 - A13(5)*J011*J021*J022*J033 + A13(5)*J011*J021*J023*J032 + A13(6)*J011*J012*J021*J033 - A13(6)*J011*J013*J021*J032))/(2*detJ0) - (S.^2*(J012*J023 - J013*J022)*(A13(1)*J012^2 + A13(4)*J012*J022 + A13(6)*J012*J032 + A13(2)*J022^2 + A13(5)*J022*J032 + A13(3)*J032^2))/(2*detJ0) - (T.^2*(J012*J023 - J013*J022)*(A13(1)*J013^2 + A13(4)*J013*J023 + A13(6)*J013*J033 + A13(2)*J023^2 + A13(5)*J023*J033 + A13(3)*J033^2))/(2*detJ0) - (S.*T.*(J012*J023 - J013*J022)*(2*A13(1)*J012*J013 + 2*A13(2)*J022*J023 + A13(4)*J012*J023 + A13(4)*J013*J022 + 2*A13(3)*J032*J033 + A13(5)*J022*J033 + A13(5)*J023*J032 + A13(6)*J012*J033 + A13(6)*J013*J032))/(2*detJ0);

U14 = (R.^2*(A14(1)*J011^2*J022*J033 - A14(1)*J011^2*J023*J032 - A14(2)*J021^2*J022*J033 + A14(2)*J021^2*J023*J032 - A14(4)*J012*J021^2*J033 + A14(4)*J013*J021^2*J032 - A14(3)*J022*J031^2*J033 + A14(3)*J023*J031^2*J032 + A14(6)*J012*J023*J031^2 - A14(6)*J013*J022*J031^2 - 2*A14(1)*J011*J012*J021*J033 + 2*A14(1)*J011*J012*J023*J031 + 2*A14(1)*J011*J013*J021*J032 - 2*A14(1)*J011*J013*J022*J031 + A14(4)*J012*J021*J023*J031 - A14(4)*J013*J021*J022*J031 - A14(5)*J021*J022*J031*J033 + A14(5)*J021*J023*J031*J032 - A14(6)*J012*J021*J031*J033 + A14(6)*J013*J021*J031*J032))/(2*detJ0) - (R.*S.*(2*A14(1)*J012^2*J021*J033 - 2*A14(1)*J012^2*J023*J031 + 2*A14(2)*J021*J022^2*J033 + A14(4)*J013*J022^2*J031 - 2*A14(3)*J023*J031*J032^2 - A14(5)*J021*J023*J032^2 - A14(6)*J013*J021*J032^2 + A14(5)*J022^2*J031*J033 - 2*A14(1)*J012*J013*J021*J032 + 2*A14(1)*J012*J013*J022*J031 - 2*A14(2)*J021*J022*J023*J032 + 2*A14(4)*J012*J021*J022*J033 - A14(4)*J012*J021*J023*J032 - A14(4)*J012*J022*J023*J031 - A14(4)*J013*J021*J022*J032 + 2*A14(3)*J022*J031*J032*J033 + A14(5)*J021*J022*J032*J033 - A14(5)*J022*J023*J031*J032 + A14(6)*J012*J021*J032*J033 + A14(6)*J012*J022*J031*J033 - 2*A14(6)*J012*J023*J031*J032 + A14(6)*J013*J022*J031*J032))/(2*detJ0) + (R.*T.*(2*A14(1)*J013^2*J021*J032 - 2*A14(1)*J013^2*J022*J031 + 2*A14(2)*J021*J023^2*J032 + A14(4)*J012*J023^2*J031 - 2*A14(3)*J022*J031*J033^2 - A14(5)*J021*J022*J033^2 - A14(6)*J012*J021*J033^2 + A14(5)*J023^2*J031*J032 - 2*A14(1)*J012*J013*J021*J033 + 2*A14(1)*J012*J013*J023*J031 - 2*A14(2)*J021*J022*J023*J033 - A14(4)*J012*J021*J023*J033 - A14(4)*J013*J021*J022*J033 + 2*A14(4)*J013*J021*J023*J032 - A14(4)*J013*J022*J023*J031 + 2*A14(3)*J023*J031*J032*J033 + A14(5)*J021*J023*J032*J033 - A14(5)*J022*J023*J031*J033 + A14(6)*J012*J023*J031*J033 + A14(6)*J013*J021*J032*J033 - 2*A14(6)*J013*J022*J031*J033 + A14(6)*J013*J023*J031*J032))/(2*detJ0) - (S.^2*(J022*J033 - J023*J032)*(A14(1)*J012^2 + A14(4)*J012*J022 + A14(6)*J012*J032 + A14(2)*J022^2 + A14(5)*J022*J032 + A14(3)*J032^2))/(2*detJ0) - (T.^2*(J022*J033 - J023*J032)*(A14(1)*J013^2 + A14(4)*J013*J023 + A14(6)*J013*J033 + A14(2)*J023^2 + A14(5)*J023*J033 + A14(3)*J033^2))/(2*detJ0) - (S.*T.*(J022*J033 - J023*J032)*(2*A14(1)*J012*J013 + 2*A14(2)*J022*J023 + A14(4)*J012*J023 + A14(4)*J013*J022 + 2*A14(3)*J032*J033 + A14(5)*J022*J033 + A14(5)*J023*J032 + A14(6)*J012*J033 + A14(6)*J013*J032))/(2*detJ0);
V14 = ((A14(1)*J011^2*J012*J033 - A14(1)*J011^2*J013*J032 - A14(2)*J012*J021^2*J033 + A14(2)*J013*J021^2*J032 + A14(3)*J012*J031^2*J033 - A14(3)*J013*J031^2*J032 + A14(4)*J011^2*J022*J033 - A14(4)*J011^2*J023*J032 + A14(5)*J012*J023*J031^2 - A14(5)*J013*J022*J031^2 + 2*A14(2)*J011*J021*J022*J033 - 2*A14(2)*J011*J021*J023*J032 + 2*A14(2)*J012*J021*J023*J031 - 2*A14(2)*J013*J021*J022*J031 + A14(4)*J011*J012*J023*J031 - A14(4)*J011*J013*J022*J031 + A14(5)*J011*J022*J031*J033 - A14(5)*J011*J023*J031*J032 + A14(6)*J011*J012*J031*J033 - A14(6)*J011*J013*J031*J032)*R.^2)/(2*detJ0) + ((2*A14(1)*J011*J012^2*J033 + 2*A14(2)*J011*J022^2*J033 - 2*A14(2)*J013*J022^2*J031 - 2*A14(3)*J013*J031*J032^2 + A14(4)*J012^2*J023*J031 - A14(5)*J011*J023*J032^2 - A14(6)*J011*J013*J032^2 + A14(6)*J012^2*J031*J033 - 2*A14(1)*J011*J012*J013*J032 - 2*A14(2)*J011*J022*J023*J032 + 2*A14(2)*J012*J022*J023*J031 + 2*A14(4)*J011*J012*J022*J033 - A14(4)*J011*J012*J023*J032 - A14(4)*J011*J013*J022*J032 - A14(4)*J012*J013*J022*J031 + 2*A14(3)*J012*J031*J032*J033 + A14(5)*J011*J022*J032*J033 + A14(5)*J012*J022*J031*J033 + A14(5)*J012*J023*J031*J032 - 2*A14(5)*J013*J022*J031*J032 + A14(6)*J011*J012*J032*J033 - A14(6)*J012*J013*J031*J032)*R.*S)/(2*detJ0) - ((2*A14(1)*J011*J013^2*J032 + 2*A14(2)*J011*J023^2*J032 - 2*A14(2)*J012*J023^2*J031 - 2*A14(3)*J012*J031*J033^2 + A14(4)*J013^2*J022*J031 - A14(5)*J011*J022*J033^2 - A14(6)*J011*J012*J033^2 + A14(6)*J013^2*J031*J032 - 2*A14(1)*J011*J012*J013*J033 - 2*A14(2)*J011*J022*J023*J033 + 2*A14(2)*J013*J022*J023*J031 - A14(4)*J011*J012*J023*J033 - A14(4)*J011*J013*J022*J033 + 2*A14(4)*J011*J013*J023*J032 - A14(4)*J012*J013*J023*J031 + 2*A14(3)*J013*J031*J032*J033 + A14(5)*J011*J023*J032*J033 - 2*A14(5)*J012*J023*J031*J033 + A14(5)*J013*J022*J031*J033 + A14(5)*J013*J023*J031*J032 + A14(6)*J011*J013*J032*J033 - A14(6)*J012*J013*J031*J033)*R.*T)/(2*detJ0) + ((J012*J033 - J013*J032)*(A14(1)*J012^2 + A14(4)*J012*J022 + A14(6)*J012*J032 + A14(2)*J022^2 + A14(5)*J022*J032 + A14(3)*J032^2)*S.^2)/(2*detJ0) + ((J012*J033 - J013*J032)*(2*A14(1)*J012*J013 + 2*A14(2)*J022*J023 + A14(4)*J012*J023 + A14(4)*J013*J022 + 2*A14(3)*J032*J033 + A14(5)*J022*J033 + A14(5)*J023*J032 + A14(6)*J012*J033 + A14(6)*J013*J032)*S.*T)/(2*detJ0) + ((J012*J033 - J013*J032)*(A14(1)*J013^2 + A14(4)*J013*J023 + A14(6)*J013*J033 + A14(2)*J023^2 + A14(5)*J023*J033 + A14(3)*J033^2)*T.^2)/(2*detJ0);
W14 = (R.*T.*(2*A14(1)*J011*J013^2*J022 - 2*A14(2)*J012*J021*J023^2 - A14(4)*J011*J012*J023^2 + 2*A14(3)*J011*J022*J033^2 - 2*A14(3)*J012*J021*J033^2 + A14(4)*J013^2*J021*J022 - A14(5)*J011*J023^2*J032 + A14(6)*J013^2*J021*J032 - 2*A14(1)*J011*J012*J013*J023 + 2*A14(2)*J013*J021*J022*J023 + A14(4)*J011*J013*J022*J023 - A14(4)*J012*J013*J021*J023 - 2*A14(3)*J011*J023*J032*J033 + 2*A14(3)*J013*J021*J032*J033 + A14(5)*J011*J022*J023*J033 - 2*A14(5)*J012*J021*J023*J033 + A14(5)*J013*J021*J022*J033 + A14(5)*J013*J021*J023*J032 - A14(6)*J011*J012*J023*J033 + 2*A14(6)*J011*J013*J022*J033 - A14(6)*J011*J013*J023*J032 - A14(6)*J012*J013*J021*J033))/(2*detJ0) - (R.*S.*(2*A14(1)*J011*J012^2*J023 - 2*A14(2)*J013*J021*J022^2 - A14(4)*J011*J013*J022^2 + 2*A14(3)*J011*J023*J032^2 - 2*A14(3)*J013*J021*J032^2 + A14(4)*J012^2*J021*J023 - A14(5)*J011*J022^2*J033 + A14(6)*J012^2*J021*J033 - 2*A14(1)*J011*J012*J013*J022 + 2*A14(2)*J012*J021*J022*J023 + A14(4)*J011*J012*J022*J023 - A14(4)*J012*J013*J021*J022 - 2*A14(3)*J011*J022*J032*J033 + 2*A14(3)*J012*J021*J032*J033 + A14(5)*J011*J022*J023*J032 + A14(5)*J012*J021*J022*J033 + A14(5)*J012*J021*J023*J032 - 2*A14(5)*J013*J021*J022*J032 - A14(6)*J011*J012*J022*J033 + 2*A14(6)*J011*J012*J023*J032 - A14(6)*J011*J013*J022*J032 - A14(6)*J012*J013*J021*J032))/(2*detJ0) - (R.^2*(A14(1)*J011^2*J012*J023 - A14(1)*J011^2*J013*J022 + A14(2)*J012*J021^2*J023 - A14(2)*J013*J021^2*J022 - A14(3)*J012*J023*J031^2 + A14(3)*J013*J022*J031^2 + A14(5)*J012*J021^2*J033 - A14(5)*J013*J021^2*J032 - A14(6)*J011^2*J022*J033 + A14(6)*J011^2*J023*J032 + A14(4)*J011*J012*J021*J023 - A14(4)*J011*J013*J021*J022 - 2*A14(3)*J011*J022*J031*J033 + 2*A14(3)*J011*J023*J031*J032 + 2*A14(3)*J012*J021*J031*J033 - 2*A14(3)*J013*J021*J031*J032 - A14(5)*J011*J021*J022*J033 + A14(5)*J011*J021*J023*J032 + A14(6)*J011*J012*J021*J033 - A14(6)*J011*J013*J021*J032))/(2*detJ0) - (S.^2*(J012*J023 - J013*J022)*(A14(1)*J012^2 + A14(4)*J012*J022 + A14(6)*J012*J032 + A14(2)*J022^2 + A14(5)*J022*J032 + A14(3)*J032^2))/(2*detJ0) - (T.^2*(J012*J023 - J013*J022)*(A14(1)*J013^2 + A14(4)*J013*J023 + A14(6)*J013*J033 + A14(2)*J023^2 + A14(5)*J023*J033 + A14(3)*J033^2))/(2*detJ0) - (S.*T.*(J012*J023 - J013*J022)*(2*A14(1)*J012*J013 + 2*A14(2)*J022*J023 + A14(4)*J012*J023 + A14(4)*J013*J022 + 2*A14(3)*J032*J033 + A14(5)*J022*J033 + A14(5)*J023*J032 + A14(6)*J012*J033 + A14(6)*J013*J032))/(2*detJ0);

U15 = (R.^2*(A15(1)*J011^2*J022*J033 - A15(1)*J011^2*J023*J032 - A15(2)*J021^2*J022*J033 + A15(2)*J021^2*J023*J032 - A15(4)*J012*J021^2*J033 + A15(4)*J013*J021^2*J032 - A15(3)*J022*J031^2*J033 + A15(3)*J023*J031^2*J032 + A15(6)*J012*J023*J031^2 - A15(6)*J013*J022*J031^2 - 2*A15(1)*J011*J012*J021*J033 + 2*A15(1)*J011*J012*J023*J031 + 2*A15(1)*J011*J013*J021*J032 - 2*A15(1)*J011*J013*J022*J031 + A15(4)*J012*J021*J023*J031 - A15(4)*J013*J021*J022*J031 - A15(5)*J021*J022*J031*J033 + A15(5)*J021*J023*J031*J032 - A15(6)*J012*J021*J031*J033 + A15(6)*J013*J021*J031*J032))/(2*detJ0) - (R.*S.*(2*A15(1)*J012^2*J021*J033 - 2*A15(1)*J012^2*J023*J031 + 2*A15(2)*J021*J022^2*J033 + A15(4)*J013*J022^2*J031 - 2*A15(3)*J023*J031*J032^2 - A15(5)*J021*J023*J032^2 - A15(6)*J013*J021*J032^2 + A15(5)*J022^2*J031*J033 - 2*A15(1)*J012*J013*J021*J032 + 2*A15(1)*J012*J013*J022*J031 - 2*A15(2)*J021*J022*J023*J032 + 2*A15(4)*J012*J021*J022*J033 - A15(4)*J012*J021*J023*J032 - A15(4)*J012*J022*J023*J031 - A15(4)*J013*J021*J022*J032 + 2*A15(3)*J022*J031*J032*J033 + A15(5)*J021*J022*J032*J033 - A15(5)*J022*J023*J031*J032 + A15(6)*J012*J021*J032*J033 + A15(6)*J012*J022*J031*J033 - 2*A15(6)*J012*J023*J031*J032 + A15(6)*J013*J022*J031*J032))/(2*detJ0) + (R.*T.*(2*A15(1)*J013^2*J021*J032 - 2*A15(1)*J013^2*J022*J031 + 2*A15(2)*J021*J023^2*J032 + A15(4)*J012*J023^2*J031 - 2*A15(3)*J022*J031*J033^2 - A15(5)*J021*J022*J033^2 - A15(6)*J012*J021*J033^2 + A15(5)*J023^2*J031*J032 - 2*A15(1)*J012*J013*J021*J033 + 2*A15(1)*J012*J013*J023*J031 - 2*A15(2)*J021*J022*J023*J033 - A15(4)*J012*J021*J023*J033 - A15(4)*J013*J021*J022*J033 + 2*A15(4)*J013*J021*J023*J032 - A15(4)*J013*J022*J023*J031 + 2*A15(3)*J023*J031*J032*J033 + A15(5)*J021*J023*J032*J033 - A15(5)*J022*J023*J031*J033 + A15(6)*J012*J023*J031*J033 + A15(6)*J013*J021*J032*J033 - 2*A15(6)*J013*J022*J031*J033 + A15(6)*J013*J023*J031*J032))/(2*detJ0) - (S.^2*(J022*J033 - J023*J032)*(A15(1)*J012^2 + A15(4)*J012*J022 + A15(6)*J012*J032 + A15(2)*J022^2 + A15(5)*J022*J032 + A15(3)*J032^2))/(2*detJ0) - (T.^2*(J022*J033 - J023*J032)*(A15(1)*J013^2 + A15(4)*J013*J023 + A15(6)*J013*J033 + A15(2)*J023^2 + A15(5)*J023*J033 + A15(3)*J033^2))/(2*detJ0) - (S.*T.*(J022*J033 - J023*J032)*(2*A15(1)*J012*J013 + 2*A15(2)*J022*J023 + A15(4)*J012*J023 + A15(4)*J013*J022 + 2*A15(3)*J032*J033 + A15(5)*J022*J033 + A15(5)*J023*J032 + A15(6)*J012*J033 + A15(6)*J013*J032))/(2*detJ0);
V15 = ((A15(1)*J011^2*J012*J033 - A15(1)*J011^2*J013*J032 - A15(2)*J012*J021^2*J033 + A15(2)*J013*J021^2*J032 + A15(3)*J012*J031^2*J033 - A15(3)*J013*J031^2*J032 + A15(4)*J011^2*J022*J033 - A15(4)*J011^2*J023*J032 + A15(5)*J012*J023*J031^2 - A15(5)*J013*J022*J031^2 + 2*A15(2)*J011*J021*J022*J033 - 2*A15(2)*J011*J021*J023*J032 + 2*A15(2)*J012*J021*J023*J031 - 2*A15(2)*J013*J021*J022*J031 + A15(4)*J011*J012*J023*J031 - A15(4)*J011*J013*J022*J031 + A15(5)*J011*J022*J031*J033 - A15(5)*J011*J023*J031*J032 + A15(6)*J011*J012*J031*J033 - A15(6)*J011*J013*J031*J032)*R.^2)/(2*detJ0) + ((2*A15(1)*J011*J012^2*J033 + 2*A15(2)*J011*J022^2*J033 - 2*A15(2)*J013*J022^2*J031 - 2*A15(3)*J013*J031*J032^2 + A15(4)*J012^2*J023*J031 - A15(5)*J011*J023*J032^2 - A15(6)*J011*J013*J032^2 + A15(6)*J012^2*J031*J033 - 2*A15(1)*J011*J012*J013*J032 - 2*A15(2)*J011*J022*J023*J032 + 2*A15(2)*J012*J022*J023*J031 + 2*A15(4)*J011*J012*J022*J033 - A15(4)*J011*J012*J023*J032 - A15(4)*J011*J013*J022*J032 - A15(4)*J012*J013*J022*J031 + 2*A15(3)*J012*J031*J032*J033 + A15(5)*J011*J022*J032*J033 + A15(5)*J012*J022*J031*J033 + A15(5)*J012*J023*J031*J032 - 2*A15(5)*J013*J022*J031*J032 + A15(6)*J011*J012*J032*J033 - A15(6)*J012*J013*J031*J032)*R.*S)/(2*detJ0) - ((2*A15(1)*J011*J013^2*J032 + 2*A15(2)*J011*J023^2*J032 - 2*A15(2)*J012*J023^2*J031 - 2*A15(3)*J012*J031*J033^2 + A15(4)*J013^2*J022*J031 - A15(5)*J011*J022*J033^2 - A15(6)*J011*J012*J033^2 + A15(6)*J013^2*J031*J032 - 2*A15(1)*J011*J012*J013*J033 - 2*A15(2)*J011*J022*J023*J033 + 2*A15(2)*J013*J022*J023*J031 - A15(4)*J011*J012*J023*J033 - A15(4)*J011*J013*J022*J033 + 2*A15(4)*J011*J013*J023*J032 - A15(4)*J012*J013*J023*J031 + 2*A15(3)*J013*J031*J032*J033 + A15(5)*J011*J023*J032*J033 - 2*A15(5)*J012*J023*J031*J033 + A15(5)*J013*J022*J031*J033 + A15(5)*J013*J023*J031*J032 + A15(6)*J011*J013*J032*J033 - A15(6)*J012*J013*J031*J033)*R.*T)/(2*detJ0) + ((J012*J033 - J013*J032)*(A15(1)*J012^2 + A15(4)*J012*J022 + A15(6)*J012*J032 + A15(2)*J022^2 + A15(5)*J022*J032 + A15(3)*J032^2)*S.^2)/(2*detJ0) + ((J012*J033 - J013*J032)*(2*A15(1)*J012*J013 + 2*A15(2)*J022*J023 + A15(4)*J012*J023 + A15(4)*J013*J022 + 2*A15(3)*J032*J033 + A15(5)*J022*J033 + A15(5)*J023*J032 + A15(6)*J012*J033 + A15(6)*J013*J032)*S.*T)/(2*detJ0) + ((J012*J033 - J013*J032)*(A15(1)*J013^2 + A15(4)*J013*J023 + A15(6)*J013*J033 + A15(2)*J023^2 + A15(5)*J023*J033 + A15(3)*J033^2)*T.^2)/(2*detJ0);
W15 = (R.*T.*(2*A15(1)*J011*J013^2*J022 - 2*A15(2)*J012*J021*J023^2 - A15(4)*J011*J012*J023^2 + 2*A15(3)*J011*J022*J033^2 - 2*A15(3)*J012*J021*J033^2 + A15(4)*J013^2*J021*J022 - A15(5)*J011*J023^2*J032 + A15(6)*J013^2*J021*J032 - 2*A15(1)*J011*J012*J013*J023 + 2*A15(2)*J013*J021*J022*J023 + A15(4)*J011*J013*J022*J023 - A15(4)*J012*J013*J021*J023 - 2*A15(3)*J011*J023*J032*J033 + 2*A15(3)*J013*J021*J032*J033 + A15(5)*J011*J022*J023*J033 - 2*A15(5)*J012*J021*J023*J033 + A15(5)*J013*J021*J022*J033 + A15(5)*J013*J021*J023*J032 - A15(6)*J011*J012*J023*J033 + 2*A15(6)*J011*J013*J022*J033 - A15(6)*J011*J013*J023*J032 - A15(6)*J012*J013*J021*J033))/(2*detJ0) - (R.*S.*(2*A15(1)*J011*J012^2*J023 - 2*A15(2)*J013*J021*J022^2 - A15(4)*J011*J013*J022^2 + 2*A15(3)*J011*J023*J032^2 - 2*A15(3)*J013*J021*J032^2 + A15(4)*J012^2*J021*J023 - A15(5)*J011*J022^2*J033 + A15(6)*J012^2*J021*J033 - 2*A15(1)*J011*J012*J013*J022 + 2*A15(2)*J012*J021*J022*J023 + A15(4)*J011*J012*J022*J023 - A15(4)*J012*J013*J021*J022 - 2*A15(3)*J011*J022*J032*J033 + 2*A15(3)*J012*J021*J032*J033 + A15(5)*J011*J022*J023*J032 + A15(5)*J012*J021*J022*J033 + A15(5)*J012*J021*J023*J032 - 2*A15(5)*J013*J021*J022*J032 - A15(6)*J011*J012*J022*J033 + 2*A15(6)*J011*J012*J023*J032 - A15(6)*J011*J013*J022*J032 - A15(6)*J012*J013*J021*J032))/(2*detJ0) - (R.^2*(A15(1)*J011^2*J012*J023 - A15(1)*J011^2*J013*J022 + A15(2)*J012*J021^2*J023 - A15(2)*J013*J021^2*J022 - A15(3)*J012*J023*J031^2 + A15(3)*J013*J022*J031^2 + A15(5)*J012*J021^2*J033 - A15(5)*J013*J021^2*J032 - A15(6)*J011^2*J022*J033 + A15(6)*J011^2*J023*J032 + A15(4)*J011*J012*J021*J023 - A15(4)*J011*J013*J021*J022 - 2*A15(3)*J011*J022*J031*J033 + 2*A15(3)*J011*J023*J031*J032 + 2*A15(3)*J012*J021*J031*J033 - 2*A15(3)*J013*J021*J031*J032 - A15(5)*J011*J021*J022*J033 + A15(5)*J011*J021*J023*J032 + A15(6)*J011*J012*J021*J033 - A15(6)*J011*J013*J021*J032))/(2*detJ0) - (S.^2*(J012*J023 - J013*J022)*(A15(1)*J012^2 + A15(4)*J012*J022 + A15(6)*J012*J032 + A15(2)*J022^2 + A15(5)*J022*J032 + A15(3)*J032^2))/(2*detJ0) - (T.^2*(J012*J023 - J013*J022)*(A15(1)*J013^2 + A15(4)*J013*J023 + A15(6)*J013*J033 + A15(2)*J023^2 + A15(5)*J023*J033 + A15(3)*J033^2))/(2*detJ0) - (S.*T.*(J012*J023 - J013*J022)*(2*A15(1)*J012*J013 + 2*A15(2)*J022*J023 + A15(4)*J012*J023 + A15(4)*J013*J022 + 2*A15(3)*J032*J033 + A15(5)*J022*J033 + A15(5)*J023*J032 + A15(6)*J012*J033 + A15(6)*J013*J032))/(2*detJ0);

U16 = ((A16(2)*J021^3*J033 - A16(3)*J023*J031^3 + A16(1)*J011^2*J021*J033 - A16(1)*J011^2*J023*J031 - A16(2)*J021^2*J023*J031 + A16(4)*J011*J021^2*J033 + A16(3)*J021*J031^2*J033 - A16(5)*J021*J023*J031^2 - A16(6)*J011*J023*J031^2 + A16(5)*J021^2*J031*J033 - A16(4)*J011*J021*J023*J031 + A16(6)*J011*J021*J031*J033)*R.^2)/(2*detJ0) + ((2*A16(1)*J011^2*J022*J033 - 2*A16(1)*J011^2*J023*J032 + 2*A16(2)*J021^2*J022*J033 + A16(4)*J013*J021^2*J032 - 2*A16(3)*J023*J031^2*J032 - A16(5)*J022*J023*J031^2 - A16(6)*J013*J022*J031^2 + A16(5)*J021^2*J032*J033 + 2*A16(1)*J011*J013*J021*J032 - 2*A16(1)*J011*J013*J022*J031 - 2*A16(2)*J021*J022*J023*J031 + 2*A16(4)*J011*J021*J022*J033 - A16(4)*J011*J021*J023*J032 - A16(4)*J011*J022*J023*J031 - A16(4)*J013*J021*J022*J031 + 2*A16(3)*J021*J031*J032*J033 + A16(5)*J021*J022*J031*J033 - A16(5)*J021*J023*J031*J032 + A16(6)*J011*J021*J032*J033 + A16(6)*J011*J022*J031*J033 - 2*A16(6)*J011*J023*J031*J032 + A16(6)*J013*J021*J031*J032)*R.*S)/(2*detJ0) + ((2*A16(2)*J021^2*J023*J033 + A16(5)*J021^2*J033^2 + A16(4)*J013*J021^2*J033 - 2*A16(2)*J021*J023^2*J031 - A16(4)*J013*J021*J023*J031 + A16(4)*J011*J021*J023*J033 + 2*A16(3)*J021*J031*J033^2 + A16(6)*J013*J021*J031*J033 + A16(6)*J011*J021*J033^2 + 2*A16(1)*J011*J013*J021*J033 - A16(5)*J023^2*J031^2 - A16(4)*J011*J023^2*J031 - 2*A16(3)*J023*J031^2*J033 - A16(6)*J013*J023*J031^2 - A16(6)*J011*J023*J031*J033 - 2*A16(1)*J011*J013*J023*J031)*R.*T)/(2*detJ0) - ((A16(1)*J012^2*J021*J033 - A16(1)*J012^2*J023*J031 - A16(2)*J021*J022^2*J033 + A16(2)*J022^2*J023*J031 - A16(4)*J011*J022^2*J033 + A16(4)*J013*J022^2*J031 - A16(3)*J021*J032^2*J033 + A16(3)*J023*J031*J032^2 + A16(6)*J011*J023*J032^2 - A16(6)*J013*J021*J032^2 - 2*A16(1)*J011*J012*J022*J033 + 2*A16(1)*J011*J012*J023*J032 - 2*A16(1)*J012*J013*J021*J032 + 2*A16(1)*J012*J013*J022*J031 + A16(4)*J011*J022*J023*J032 - A16(4)*J013*J021*J022*J032 - A16(5)*J021*J022*J032*J033 + A16(5)*J022*J023*J031*J032 - A16(6)*J011*J022*J032*J033 + A16(6)*J013*J022*J031*J032)*S.^2)/(2*detJ0) + ((2*A16(1)*J013^2*J021*J032 - 2*A16(1)*J013^2*J022*J031 - 2*A16(2)*J022*J023^2*J031 - A16(4)*J011*J023^2*J032 + 2*A16(3)*J021*J032*J033^2 + A16(5)*J021*J022*J033^2 + A16(6)*J011*J022*J033^2 - A16(5)*J023^2*J031*J032 + 2*A16(1)*J011*J013*J022*J033 - 2*A16(1)*J011*J013*J023*J032 + 2*A16(2)*J021*J022*J023*J033 + A16(4)*J011*J022*J023*J033 + A16(4)*J013*J021*J022*J033 + A16(4)*J013*J021*J023*J032 - 2*A16(4)*J013*J022*J023*J031 - 2*A16(3)*J023*J031*J032*J033 + A16(5)*J021*J023*J032*J033 - A16(5)*J022*J023*J031*J033 - A16(6)*J011*J023*J032*J033 + 2*A16(6)*J013*J021*J032*J033 - A16(6)*J013*J022*J031*J033 - A16(6)*J013*J023*J031*J032)*S.*T)/(2*detJ0) - ((A16(2)*J023^3*J031 - A16(3)*J021*J033^3 - A16(1)*J013^2*J021*J033 + A16(1)*J013^2*J023*J031 - A16(2)*J021*J023^2*J033 + A16(4)*J013*J023^2*J031 + A16(3)*J023*J031*J033^2 - A16(5)*J021*J023*J033^2 - A16(6)*J013*J021*J033^2 + A16(5)*J023^2*J031*J033 - A16(4)*J013*J021*J023*J033 + A16(6)*J013*J023*J031*J033)*T.^2)/(2*detJ0);
V16 = ((2*A16(1)*J012*J013^2*J031 - 2*A16(2)*J011*J023^2*J032 + 2*A16(2)*J012*J023^2*J031 - 2*A16(3)*J011*J032*J033^2 + A16(4)*J013^2*J021*J032 - A16(5)*J012*J021*J033^2 - A16(6)*J011*J012*J033^2 + A16(6)*J013^2*J031*J032 - 2*A16(1)*J011*J012*J013*J033 - 2*A16(2)*J012*J021*J023*J033 + 2*A16(2)*J013*J021*J023*J032 - A16(4)*J011*J012*J023*J033 - A16(4)*J011*J013*J023*J032 - A16(4)*J012*J013*J021*J033 + 2*A16(4)*J012*J013*J023*J031 + 2*A16(3)*J013*J031*J032*J033 - 2*A16(5)*J011*J023*J032*J033 + A16(5)*J012*J023*J031*J033 + A16(5)*J013*J021*J032*J033 + A16(5)*J013*J023*J031*J032 - A16(6)*J011*J013*J032*J033 + A16(6)*J012*J013*J031*J033)*S.*T)/(2*detJ0) - ((2*A16(1)*J011^2*J012*J033 + 2*A16(2)*J012*J021^2*J033 - 2*A16(2)*J013*J021^2*J032 - 2*A16(3)*J013*J031^2*J032 + A16(4)*J011^2*J023*J032 - A16(5)*J012*J023*J031^2 - A16(6)*J012*J013*J031^2 + A16(6)*J011^2*J032*J033 - 2*A16(1)*J011*J012*J013*J031 + 2*A16(2)*J011*J021*J023*J032 - 2*A16(2)*J012*J021*J023*J031 + 2*A16(4)*J011*J012*J021*J033 - A16(4)*J011*J012*J023*J031 - A16(4)*J011*J013*J021*J032 - A16(4)*J012*J013*J021*J031 + 2*A16(3)*J011*J031*J032*J033 + A16(5)*J011*J021*J032*J033 + A16(5)*J011*J023*J031*J032 + A16(5)*J012*J021*J031*J033 - 2*A16(5)*J013*J021*J031*J032 + A16(6)*J011*J012*J031*J033 - A16(6)*J011*J013*J031*J032)*R.*S)/(2*detJ0) - ((2*A16(1)*J011^2*J013*J033 + A16(6)*J011^2*J033^2 + A16(4)*J023*J011^2*J033 - 2*A16(1)*J011*J013^2*J031 - A16(4)*J023*J011*J013*J031 + A16(4)*J021*J011*J013*J033 + 2*A16(3)*J011*J031*J033^2 + A16(5)*J023*J011*J031*J033 + A16(5)*J021*J011*J033^2 + 2*A16(2)*J021*J023*J011*J033 - A16(6)*J013^2*J031^2 - A16(4)*J021*J013^2*J031 - 2*A16(3)*J013*J031^2*J033 - A16(5)*J023*J013*J031^2 - A16(5)*J021*J013*J031*J033 - 2*A16(2)*J021*J023*J013*J031)*R.*T)/(2*detJ0) - ((A16(1)*J011*J012^2*J033 - A16(1)*J012^2*J013*J031 - A16(2)*J011*J022^2*J033 + A16(2)*J013*J022^2*J031 + A16(3)*J011*J032^2*J033 - A16(3)*J013*J031*J032^2 + A16(4)*J012^2*J021*J033 - A16(4)*J012^2*J023*J031 + A16(5)*J011*J023*J032^2 - A16(5)*J013*J021*J032^2 + 2*A16(2)*J011*J022*J023*J032 + 2*A16(2)*J012*J021*J022*J033 - 2*A16(2)*J012*J022*J023*J031 - 2*A16(2)*J013*J021*J022*J032 + A16(4)*J011*J012*J023*J032 - A16(4)*J012*J013*J021*J032 + A16(5)*J012*J021*J032*J033 - A16(5)*J012*J023*J031*J032 + A16(6)*J011*J012*J032*J033 - A16(6)*J012*J013*J031*J032)*S.^2)/(2*detJ0) - ((A16(1)*J011^3*J033 - A16(3)*J013*J031^3 - A16(1)*J011^2*J013*J031 + A16(2)*J011*J021^2*J033 - A16(2)*J013*J021^2*J031 + A16(3)*J011*J031^2*J033 + A16(4)*J011^2*J021*J033 - A16(5)*J013*J021*J031^2 - A16(6)*J011*J013*J031^2 + A16(6)*J011^2*J031*J033 - A16(4)*J011*J013*J021*J031 + A16(5)*J011*J021*J031*J033)*R.^2)/(2*detJ0) + ((A16(1)*J013^3*J031 - A16(3)*J011*J033^3 - A16(1)*J011*J013^2*J033 - A16(2)*J011*J023^2*J033 + A16(2)*J013*J023^2*J031 + A16(3)*J013*J031*J033^2 + A16(4)*J013^2*J023*J031 - A16(5)*J011*J023*J033^2 - A16(6)*J011*J013*J033^2 + A16(6)*J013^2*J031*J033 - A16(4)*J011*J013*J023*J033 + A16(5)*J013*J023*J031*J033)*T.^2)/(2*detJ0);
W16 = ((J011*J023 - J013*J021)*(A16(1)*J011^2 + A16(4)*J011*J021 + A16(6)*J011*J031 + A16(2)*J021^2 + A16(5)*J021*J031 + A16(3)*J031^2)*R.^2)/(2*detJ0) + ((2*A16(1)*J011^2*J012*J023 - 2*A16(2)*J013*J021^2*J022 - A16(4)*J012*J013*J021^2 + 2*A16(3)*J012*J023*J031^2 - 2*A16(3)*J013*J022*J031^2 + A16(4)*J011^2*J022*J023 - A16(5)*J012*J021^2*J033 + A16(6)*J011^2*J022*J033 - 2*A16(1)*J011*J012*J013*J021 + 2*A16(2)*J011*J021*J022*J023 + A16(4)*J011*J012*J021*J023 - A16(4)*J011*J013*J021*J022 + 2*A16(3)*J011*J022*J031*J033 - 2*A16(3)*J012*J021*J031*J033 + A16(5)*J011*J021*J022*J033 + A16(5)*J011*J022*J023*J031 + A16(5)*J012*J021*J023*J031 - 2*A16(5)*J013*J021*J022*J031 - A16(6)*J011*J012*J021*J033 + 2*A16(6)*J011*J012*J023*J031 - A16(6)*J011*J013*J022*J031 - A16(6)*J012*J013*J021*J031)*R.*S)/(2*detJ0) + ((J011*J023 - J013*J021)*(2*A16(1)*J011*J013 + 2*A16(2)*J021*J023 + A16(4)*J011*J023 + A16(4)*J013*J021 + 2*A16(3)*J031*J033 + A16(5)*J021*J033 + A16(5)*J023*J031 + A16(6)*J011*J033 + A16(6)*J013*J031)*R.*T)/(2*detJ0) + ((A16(1)*J011*J012^2*J023 - A16(1)*J012^2*J013*J021 + A16(2)*J011*J022^2*J023 - A16(2)*J013*J021*J022^2 - A16(3)*J011*J023*J032^2 + A16(3)*J013*J021*J032^2 + A16(5)*J011*J022^2*J033 - A16(5)*J013*J022^2*J031 - A16(6)*J012^2*J021*J033 + A16(6)*J012^2*J023*J031 + A16(4)*J011*J012*J022*J023 - A16(4)*J012*J013*J021*J022 + 2*A16(3)*J011*J022*J032*J033 - 2*A16(3)*J012*J021*J032*J033 + 2*A16(3)*J012*J023*J031*J032 - 2*A16(3)*J013*J022*J031*J032 - A16(5)*J012*J021*J022*J033 + A16(5)*J012*J022*J023*J031 + A16(6)*J011*J012*J022*J033 - A16(6)*J012*J013*J022*J031)*S.^2)/(2*detJ0) - ((2*A16(1)*J012*J013^2*J021 - 2*A16(2)*J011*J022*J023^2 - A16(4)*J011*J012*J023^2 - 2*A16(3)*J011*J022*J033^2 + 2*A16(3)*J012*J021*J033^2 + A16(4)*J013^2*J021*J022 - A16(5)*J012*J023^2*J031 + A16(6)*J013^2*J022*J031 - 2*A16(1)*J011*J012*J013*J023 + 2*A16(2)*J013*J021*J022*J023 - A16(4)*J011*J013*J022*J023 + A16(4)*J012*J013*J021*J023 - 2*A16(3)*J012*J023*J031*J033 + 2*A16(3)*J013*J022*J031*J033 - 2*A16(5)*J011*J022*J023*J033 + A16(5)*J012*J021*J023*J033 + A16(5)*J013*J021*J022*J033 + A16(5)*J013*J022*J023*J031 - A16(6)*J011*J012*J023*J033 - A16(6)*J011*J013*J022*J033 + 2*A16(6)*J012*J013*J021*J033 - A16(6)*J012*J013*J023*J031)*S.*T)/(2*detJ0) + ((J011*J023 - J013*J021)*(A16(1)*J013^2 + A16(4)*J013*J023 + A16(6)*J013*J033 + A16(2)*J023^2 + A16(5)*J023*J033 + A16(3)*J033^2)*T.^2)/(2*detJ0);

U17 = ((A17(2)*J021^3*J033 - A17(3)*J023*J031^3 + A17(1)*J011^2*J021*J033 - A17(1)*J011^2*J023*J031 - A17(2)*J021^2*J023*J031 + A17(4)*J011*J021^2*J033 + A17(3)*J021*J031^2*J033 - A17(5)*J021*J023*J031^2 - A17(6)*J011*J023*J031^2 + A17(5)*J021^2*J031*J033 - A17(4)*J011*J021*J023*J031 + A17(6)*J011*J021*J031*J033)*R.^2)/(2*detJ0) + ((2*A17(1)*J011^2*J022*J033 - 2*A17(1)*J011^2*J023*J032 + 2*A17(2)*J021^2*J022*J033 + A17(4)*J013*J021^2*J032 - 2*A17(3)*J023*J031^2*J032 - A17(5)*J022*J023*J031^2 - A17(6)*J013*J022*J031^2 + A17(5)*J021^2*J032*J033 + 2*A17(1)*J011*J013*J021*J032 - 2*A17(1)*J011*J013*J022*J031 - 2*A17(2)*J021*J022*J023*J031 + 2*A17(4)*J011*J021*J022*J033 - A17(4)*J011*J021*J023*J032 - A17(4)*J011*J022*J023*J031 - A17(4)*J013*J021*J022*J031 + 2*A17(3)*J021*J031*J032*J033 + A17(5)*J021*J022*J031*J033 - A17(5)*J021*J023*J031*J032 + A17(6)*J011*J021*J032*J033 + A17(6)*J011*J022*J031*J033 - 2*A17(6)*J011*J023*J031*J032 + A17(6)*J013*J021*J031*J032)*R.*S)/(2*detJ0) + ((2*A17(2)*J021^2*J023*J033 + A17(5)*J021^2*J033^2 + A17(4)*J013*J021^2*J033 - 2*A17(2)*J021*J023^2*J031 - A17(4)*J013*J021*J023*J031 + A17(4)*J011*J021*J023*J033 + 2*A17(3)*J021*J031*J033^2 + A17(6)*J013*J021*J031*J033 + A17(6)*J011*J021*J033^2 + 2*A17(1)*J011*J013*J021*J033 - A17(5)*J023^2*J031^2 - A17(4)*J011*J023^2*J031 - 2*A17(3)*J023*J031^2*J033 - A17(6)*J013*J023*J031^2 - A17(6)*J011*J023*J031*J033 - 2*A17(1)*J011*J013*J023*J031)*R.*T)/(2*detJ0) - ((A17(1)*J012^2*J021*J033 - A17(1)*J012^2*J023*J031 - A17(2)*J021*J022^2*J033 + A17(2)*J022^2*J023*J031 - A17(4)*J011*J022^2*J033 + A17(4)*J013*J022^2*J031 - A17(3)*J021*J032^2*J033 + A17(3)*J023*J031*J032^2 + A17(6)*J011*J023*J032^2 - A17(6)*J013*J021*J032^2 - 2*A17(1)*J011*J012*J022*J033 + 2*A17(1)*J011*J012*J023*J032 - 2*A17(1)*J012*J013*J021*J032 + 2*A17(1)*J012*J013*J022*J031 + A17(4)*J011*J022*J023*J032 - A17(4)*J013*J021*J022*J032 - A17(5)*J021*J022*J032*J033 + A17(5)*J022*J023*J031*J032 - A17(6)*J011*J022*J032*J033 + A17(6)*J013*J022*J031*J032)*S.^2)/(2*detJ0) + ((2*A17(1)*J013^2*J021*J032 - 2*A17(1)*J013^2*J022*J031 - 2*A17(2)*J022*J023^2*J031 - A17(4)*J011*J023^2*J032 + 2*A17(3)*J021*J032*J033^2 + A17(5)*J021*J022*J033^2 + A17(6)*J011*J022*J033^2 - A17(5)*J023^2*J031*J032 + 2*A17(1)*J011*J013*J022*J033 - 2*A17(1)*J011*J013*J023*J032 + 2*A17(2)*J021*J022*J023*J033 + A17(4)*J011*J022*J023*J033 + A17(4)*J013*J021*J022*J033 + A17(4)*J013*J021*J023*J032 - 2*A17(4)*J013*J022*J023*J031 - 2*A17(3)*J023*J031*J032*J033 + A17(5)*J021*J023*J032*J033 - A17(5)*J022*J023*J031*J033 - A17(6)*J011*J023*J032*J033 + 2*A17(6)*J013*J021*J032*J033 - A17(6)*J013*J022*J031*J033 - A17(6)*J013*J023*J031*J032)*S.*T)/(2*detJ0) - ((A17(2)*J023^3*J031 - A17(3)*J021*J033^3 - A17(1)*J013^2*J021*J033 + A17(1)*J013^2*J023*J031 - A17(2)*J021*J023^2*J033 + A17(4)*J013*J023^2*J031 + A17(3)*J023*J031*J033^2 - A17(5)*J021*J023*J033^2 - A17(6)*J013*J021*J033^2 + A17(5)*J023^2*J031*J033 - A17(4)*J013*J021*J023*J033 + A17(6)*J013*J023*J031*J033)*T.^2)/(2*detJ0);
V17 = ((2*A17(1)*J012*J013^2*J031 - 2*A17(2)*J011*J023^2*J032 + 2*A17(2)*J012*J023^2*J031 - 2*A17(3)*J011*J032*J033^2 + A17(4)*J013^2*J021*J032 - A17(5)*J012*J021*J033^2 - A17(6)*J011*J012*J033^2 + A17(6)*J013^2*J031*J032 - 2*A17(1)*J011*J012*J013*J033 - 2*A17(2)*J012*J021*J023*J033 + 2*A17(2)*J013*J021*J023*J032 - A17(4)*J011*J012*J023*J033 - A17(4)*J011*J013*J023*J032 - A17(4)*J012*J013*J021*J033 + 2*A17(4)*J012*J013*J023*J031 + 2*A17(3)*J013*J031*J032*J033 - 2*A17(5)*J011*J023*J032*J033 + A17(5)*J012*J023*J031*J033 + A17(5)*J013*J021*J032*J033 + A17(5)*J013*J023*J031*J032 - A17(6)*J011*J013*J032*J033 + A17(6)*J012*J013*J031*J033)*S.*T)/(2*detJ0) - ((2*A17(1)*J011^2*J012*J033 + 2*A17(2)*J012*J021^2*J033 - 2*A17(2)*J013*J021^2*J032 - 2*A17(3)*J013*J031^2*J032 + A17(4)*J011^2*J023*J032 - A17(5)*J012*J023*J031^2 - A17(6)*J012*J013*J031^2 + A17(6)*J011^2*J032*J033 - 2*A17(1)*J011*J012*J013*J031 + 2*A17(2)*J011*J021*J023*J032 - 2*A17(2)*J012*J021*J023*J031 + 2*A17(4)*J011*J012*J021*J033 - A17(4)*J011*J012*J023*J031 - A17(4)*J011*J013*J021*J032 - A17(4)*J012*J013*J021*J031 + 2*A17(3)*J011*J031*J032*J033 + A17(5)*J011*J021*J032*J033 + A17(5)*J011*J023*J031*J032 + A17(5)*J012*J021*J031*J033 - 2*A17(5)*J013*J021*J031*J032 + A17(6)*J011*J012*J031*J033 - A17(6)*J011*J013*J031*J032)*R.*S)/(2*detJ0) - ((2*A17(1)*J011^2*J013*J033 + A17(6)*J011^2*J033^2 + A17(4)*J023*J011^2*J033 - 2*A17(1)*J011*J013^2*J031 - A17(4)*J023*J011*J013*J031 + A17(4)*J021*J011*J013*J033 + 2*A17(3)*J011*J031*J033^2 + A17(5)*J023*J011*J031*J033 + A17(5)*J021*J011*J033^2 + 2*A17(2)*J021*J023*J011*J033 - A17(6)*J013^2*J031^2 - A17(4)*J021*J013^2*J031 - 2*A17(3)*J013*J031^2*J033 - A17(5)*J023*J013*J031^2 - A17(5)*J021*J013*J031*J033 - 2*A17(2)*J021*J023*J013*J031)*R.*T)/(2*detJ0) - ((A17(1)*J011*J012^2*J033 - A17(1)*J012^2*J013*J031 - A17(2)*J011*J022^2*J033 + A17(2)*J013*J022^2*J031 + A17(3)*J011*J032^2*J033 - A17(3)*J013*J031*J032^2 + A17(4)*J012^2*J021*J033 - A17(4)*J012^2*J023*J031 + A17(5)*J011*J023*J032^2 - A17(5)*J013*J021*J032^2 + 2*A17(2)*J011*J022*J023*J032 + 2*A17(2)*J012*J021*J022*J033 - 2*A17(2)*J012*J022*J023*J031 - 2*A17(2)*J013*J021*J022*J032 + A17(4)*J011*J012*J023*J032 - A17(4)*J012*J013*J021*J032 + A17(5)*J012*J021*J032*J033 - A17(5)*J012*J023*J031*J032 + A17(6)*J011*J012*J032*J033 - A17(6)*J012*J013*J031*J032)*S.^2)/(2*detJ0) - ((A17(1)*J011^3*J033 - A17(3)*J013*J031^3 - A17(1)*J011^2*J013*J031 + A17(2)*J011*J021^2*J033 - A17(2)*J013*J021^2*J031 + A17(3)*J011*J031^2*J033 + A17(4)*J011^2*J021*J033 - A17(5)*J013*J021*J031^2 - A17(6)*J011*J013*J031^2 + A17(6)*J011^2*J031*J033 - A17(4)*J011*J013*J021*J031 + A17(5)*J011*J021*J031*J033)*R.^2)/(2*detJ0) + ((A17(1)*J013^3*J031 - A17(3)*J011*J033^3 - A17(1)*J011*J013^2*J033 - A17(2)*J011*J023^2*J033 + A17(2)*J013*J023^2*J031 + A17(3)*J013*J031*J033^2 + A17(4)*J013^2*J023*J031 - A17(5)*J011*J023*J033^2 - A17(6)*J011*J013*J033^2 + A17(6)*J013^2*J031*J033 - A17(4)*J011*J013*J023*J033 + A17(5)*J013*J023*J031*J033)*T.^2)/(2*detJ0);
W17 = ((A17(1)*J011^3*J023 - A17(2)*J013*J021^3 - A17(1)*J011^2*J013*J021 + A17(2)*J011*J021^2*J023 - A17(4)*J011*J013*J021^2 + A17(3)*J011*J023*J031^2 - A17(3)*J013*J021*J031^2 + A17(4)*J011^2*J021*J023 - A17(5)*J013*J021^2*J031 + A17(6)*J011^2*J023*J031 + A17(5)*J011*J021*J023*J031 - A17(6)*J011*J013*J021*J031)*R.^2)/(2*detJ0) + ((2*A17(1)*J011^2*J012*J023 - 2*A17(2)*J013*J021^2*J022 - A17(4)*J012*J013*J021^2 + 2*A17(3)*J012*J023*J031^2 - 2*A17(3)*J013*J022*J031^2 + A17(4)*J011^2*J022*J023 - A17(5)*J012*J021^2*J033 + A17(6)*J011^2*J022*J033 - 2*A17(1)*J011*J012*J013*J021 + 2*A17(2)*J011*J021*J022*J023 + A17(4)*J011*J012*J021*J023 - A17(4)*J011*J013*J021*J022 + 2*A17(3)*J011*J022*J031*J033 - 2*A17(3)*J012*J021*J031*J033 + A17(5)*J011*J021*J022*J033 + A17(5)*J011*J022*J023*J031 + A17(5)*J012*J021*J023*J031 - 2*A17(5)*J013*J021*J022*J031 - A17(6)*J011*J012*J021*J033 + 2*A17(6)*J011*J012*J023*J031 - A17(6)*J011*J013*J022*J031 - A17(6)*J012*J013*J021*J031)*R.*S)/(2*detJ0) + (T.*(2*A17(1)*J011^2*J013*J023 + A17(4)*J011^2*J023^2 + A17(6)*J033*J011^2*J023 - 2*A17(1)*J011*J013^2*J021 - A17(6)*J033*J011*J013*J021 + A17(6)*J031*J011*J013*J023 + 2*A17(2)*J011*J021*J023^2 + A17(5)*J033*J011*J021*J023 + A17(5)*J031*J011*J023^2 + 2*A17(3)*J031*J033*J011*J023 - A17(4)*J013^2*J021^2 - A17(6)*J031*J013^2*J021 - 2*A17(2)*J013*J021^2*J023 - A17(5)*J033*J013*J021^2 - A17(5)*J031*J013*J021*J023 - 2*A17(3)*J031*J033*J013*J021).*R)/(2*detJ0) + ((A17(1)*J011*J012^2*J023 - A17(1)*J012^2*J013*J021 + A17(2)*J011*J022^2*J023 - A17(2)*J013*J021*J022^2 - A17(3)*J011*J023*J032^2 + A17(3)*J013*J021*J032^2 + A17(5)*J011*J022^2*J033 - A17(5)*J013*J022^2*J031 - A17(6)*J012^2*J021*J033 + A17(6)*J012^2*J023*J031 + A17(4)*J011*J012*J022*J023 - A17(4)*J012*J013*J021*J022 + 2*A17(3)*J011*J022*J032*J033 - 2*A17(3)*J012*J021*J032*J033 + 2*A17(3)*J012*J023*J031*J032 - 2*A17(3)*J013*J022*J031*J032 - A17(5)*J012*J021*J022*J033 + A17(5)*J012*J022*J023*J031 + A17(6)*J011*J012*J022*J033 - A17(6)*J012*J013*J022*J031)*S.^2)/(2*detJ0) - (T.*(2*A17(1)*J012*J013^2*J021 - 2*A17(2)*J011*J022*J023^2 - A17(4)*J011*J012*J023^2 - 2*A17(3)*J011*J022*J033^2 + 2*A17(3)*J012*J021*J033^2 + A17(4)*J013^2*J021*J022 - A17(5)*J012*J023^2*J031 + A17(6)*J013^2*J022*J031 - 2*A17(1)*J011*J012*J013*J023 + 2*A17(2)*J013*J021*J022*J023 - A17(4)*J011*J013*J022*J023 + A17(4)*J012*J013*J021*J023 - 2*A17(3)*J012*J023*J031*J033 + 2*A17(3)*J013*J022*J031*J033 - 2*A17(5)*J011*J022*J023*J033 + A17(5)*J012*J021*J023*J033 + A17(5)*J013*J021*J022*J033 + A17(5)*J013*J022*J023*J031 - A17(6)*J011*J012*J023*J033 - A17(6)*J011*J013*J022*J033 + 2*A17(6)*J012*J013*J021*J033 - A17(6)*J012*J013*J023*J031).*S)/(2*detJ0) - (T.^2*(A17(1)*J013^3*J021 - A17(2)*J011*J023^3 - A17(1)*J011*J013^2*J023 + A17(2)*J013*J021*J023^2 - A17(4)*J011*J013*J023^2 - A17(3)*J011*J023*J033^2 + A17(3)*J013*J021*J033^2 + A17(4)*J013^2*J021*J023 - A17(5)*J011*J023^2*J033 + A17(6)*J013^2*J021*J033 + A17(5)*J013*J021*J023*J033 - A17(6)*J011*J013*J023*J033))/(2*detJ0);

U18 = ((A18(2)*J021^3*J033 - A18(3)*J023*J031^3 + A18(1)*J011^2*J021*J033 - A18(1)*J011^2*J023*J031 - A18(2)*J021^2*J023*J031 + A18(4)*J011*J021^2*J033 + A18(3)*J021*J031^2*J033 - A18(5)*J021*J023*J031^2 - A18(6)*J011*J023*J031^2 + A18(5)*J021^2*J031*J033 - A18(4)*J011*J021*J023*J031 + A18(6)*J011*J021*J031*J033)*R.^2)/(2*detJ0) + ((2*A18(1)*J011^2*J022*J033 - 2*A18(1)*J011^2*J023*J032 + 2*A18(2)*J021^2*J022*J033 + A18(4)*J013*J021^2*J032 - 2*A18(3)*J023*J031^2*J032 - A18(5)*J022*J023*J031^2 - A18(6)*J013*J022*J031^2 + A18(5)*J021^2*J032*J033 + 2*A18(1)*J011*J013*J021*J032 - 2*A18(1)*J011*J013*J022*J031 - 2*A18(2)*J021*J022*J023*J031 + 2*A18(4)*J011*J021*J022*J033 - A18(4)*J011*J021*J023*J032 - A18(4)*J011*J022*J023*J031 - A18(4)*J013*J021*J022*J031 + 2*A18(3)*J021*J031*J032*J033 + A18(5)*J021*J022*J031*J033 - A18(5)*J021*J023*J031*J032 + A18(6)*J011*J021*J032*J033 + A18(6)*J011*J022*J031*J033 - 2*A18(6)*J011*J023*J031*J032 + A18(6)*J013*J021*J031*J032)*R.*S)/(2*detJ0) + ((2*A18(2)*J021^2*J023*J033 + A18(5)*J021^2*J033^2 + A18(4)*J013*J021^2*J033 - 2*A18(2)*J021*J023^2*J031 - A18(4)*J013*J021*J023*J031 + A18(4)*J011*J021*J023*J033 + 2*A18(3)*J021*J031*J033^2 + A18(6)*J013*J021*J031*J033 + A18(6)*J011*J021*J033^2 + 2*A18(1)*J011*J013*J021*J033 - A18(5)*J023^2*J031^2 - A18(4)*J011*J023^2*J031 - 2*A18(3)*J023*J031^2*J033 - A18(6)*J013*J023*J031^2 - A18(6)*J011*J023*J031*J033 - 2*A18(1)*J011*J013*J023*J031)*R.*T)/(2*detJ0) - ((A18(1)*J012^2*J021*J033 - A18(1)*J012^2*J023*J031 - A18(2)*J021*J022^2*J033 + A18(2)*J022^2*J023*J031 - A18(4)*J011*J022^2*J033 + A18(4)*J013*J022^2*J031 - A18(3)*J021*J032^2*J033 + A18(3)*J023*J031*J032^2 + A18(6)*J011*J023*J032^2 - A18(6)*J013*J021*J032^2 - 2*A18(1)*J011*J012*J022*J033 + 2*A18(1)*J011*J012*J023*J032 - 2*A18(1)*J012*J013*J021*J032 + 2*A18(1)*J012*J013*J022*J031 + A18(4)*J011*J022*J023*J032 - A18(4)*J013*J021*J022*J032 - A18(5)*J021*J022*J032*J033 + A18(5)*J022*J023*J031*J032 - A18(6)*J011*J022*J032*J033 + A18(6)*J013*J022*J031*J032)*S.^2)/(2*detJ0) + ((2*A18(1)*J013^2*J021*J032 - 2*A18(1)*J013^2*J022*J031 - 2*A18(2)*J022*J023^2*J031 - A18(4)*J011*J023^2*J032 + 2*A18(3)*J021*J032*J033^2 + A18(5)*J021*J022*J033^2 + A18(6)*J011*J022*J033^2 - A18(5)*J023^2*J031*J032 + 2*A18(1)*J011*J013*J022*J033 - 2*A18(1)*J011*J013*J023*J032 + 2*A18(2)*J021*J022*J023*J033 + A18(4)*J011*J022*J023*J033 + A18(4)*J013*J021*J022*J033 + A18(4)*J013*J021*J023*J032 - 2*A18(4)*J013*J022*J023*J031 - 2*A18(3)*J023*J031*J032*J033 + A18(5)*J021*J023*J032*J033 - A18(5)*J022*J023*J031*J033 - A18(6)*J011*J023*J032*J033 + 2*A18(6)*J013*J021*J032*J033 - A18(6)*J013*J022*J031*J033 - A18(6)*J013*J023*J031*J032)*S.*T)/(2*detJ0) - ((A18(2)*J023^3*J031 - A18(3)*J021*J033^3 - A18(1)*J013^2*J021*J033 + A18(1)*J013^2*J023*J031 - A18(2)*J021*J023^2*J033 + A18(4)*J013*J023^2*J031 + A18(3)*J023*J031*J033^2 - A18(5)*J021*J023*J033^2 - A18(6)*J013*J021*J033^2 + A18(5)*J023^2*J031*J033 - A18(4)*J013*J021*J023*J033 + A18(6)*J013*J023*J031*J033)*T.^2)/(2*detJ0);
V18 = ((2*A18(1)*J012*J013^2*J031 - 2*A18(2)*J011*J023^2*J032 + 2*A18(2)*J012*J023^2*J031 - 2*A18(3)*J011*J032*J033^2 + A18(4)*J013^2*J021*J032 - A18(5)*J012*J021*J033^2 - A18(6)*J011*J012*J033^2 + A18(6)*J013^2*J031*J032 - 2*A18(1)*J011*J012*J013*J033 - 2*A18(2)*J012*J021*J023*J033 + 2*A18(2)*J013*J021*J023*J032 - A18(4)*J011*J012*J023*J033 - A18(4)*J011*J013*J023*J032 - A18(4)*J012*J013*J021*J033 + 2*A18(4)*J012*J013*J023*J031 + 2*A18(3)*J013*J031*J032*J033 - 2*A18(5)*J011*J023*J032*J033 + A18(5)*J012*J023*J031*J033 + A18(5)*J013*J021*J032*J033 + A18(5)*J013*J023*J031*J032 - A18(6)*J011*J013*J032*J033 + A18(6)*J012*J013*J031*J033)*S.*T)/(2*detJ0) - ((2*A18(1)*J011^2*J012*J033 + 2*A18(2)*J012*J021^2*J033 - 2*A18(2)*J013*J021^2*J032 - 2*A18(3)*J013*J031^2*J032 + A18(4)*J011^2*J023*J032 - A18(5)*J012*J023*J031^2 - A18(6)*J012*J013*J031^2 + A18(6)*J011^2*J032*J033 - 2*A18(1)*J011*J012*J013*J031 + 2*A18(2)*J011*J021*J023*J032 - 2*A18(2)*J012*J021*J023*J031 + 2*A18(4)*J011*J012*J021*J033 - A18(4)*J011*J012*J023*J031 - A18(4)*J011*J013*J021*J032 - A18(4)*J012*J013*J021*J031 + 2*A18(3)*J011*J031*J032*J033 + A18(5)*J011*J021*J032*J033 + A18(5)*J011*J023*J031*J032 + A18(5)*J012*J021*J031*J033 - 2*A18(5)*J013*J021*J031*J032 + A18(6)*J011*J012*J031*J033 - A18(6)*J011*J013*J031*J032)*R.*S)/(2*detJ0) - ((2*A18(1)*J011^2*J013*J033 + A18(6)*J011^2*J033^2 + A18(4)*J023*J011^2*J033 - 2*A18(1)*J011*J013^2*J031 - A18(4)*J023*J011*J013*J031 + A18(4)*J021*J011*J013*J033 + 2*A18(3)*J011*J031*J033^2 + A18(5)*J023*J011*J031*J033 + A18(5)*J021*J011*J033^2 + 2*A18(2)*J021*J023*J011*J033 - A18(6)*J013^2*J031^2 - A18(4)*J021*J013^2*J031 - 2*A18(3)*J013*J031^2*J033 - A18(5)*J023*J013*J031^2 - A18(5)*J021*J013*J031*J033 - 2*A18(2)*J021*J023*J013*J031)*R.*T)/(2*detJ0) - ((A18(1)*J011*J012^2*J033 - A18(1)*J012^2*J013*J031 - A18(2)*J011*J022^2*J033 + A18(2)*J013*J022^2*J031 + A18(3)*J011*J032^2*J033 - A18(3)*J013*J031*J032^2 + A18(4)*J012^2*J021*J033 - A18(4)*J012^2*J023*J031 + A18(5)*J011*J023*J032^2 - A18(5)*J013*J021*J032^2 + 2*A18(2)*J011*J022*J023*J032 + 2*A18(2)*J012*J021*J022*J033 - 2*A18(2)*J012*J022*J023*J031 - 2*A18(2)*J013*J021*J022*J032 + A18(4)*J011*J012*J023*J032 - A18(4)*J012*J013*J021*J032 + A18(5)*J012*J021*J032*J033 - A18(5)*J012*J023*J031*J032 + A18(6)*J011*J012*J032*J033 - A18(6)*J012*J013*J031*J032)*S.^2)/(2*detJ0) - ((A18(1)*J011^3*J033 - A18(3)*J013*J031^3 - A18(1)*J011^2*J013*J031 + A18(2)*J011*J021^2*J033 - A18(2)*J013*J021^2*J031 + A18(3)*J011*J031^2*J033 + A18(4)*J011^2*J021*J033 - A18(5)*J013*J021*J031^2 - A18(6)*J011*J013*J031^2 + A18(6)*J011^2*J031*J033 - A18(4)*J011*J013*J021*J031 + A18(5)*J011*J021*J031*J033)*R.^2)/(2*detJ0) + ((A18(1)*J013^3*J031 - A18(3)*J011*J033^3 - A18(1)*J011*J013^2*J033 - A18(2)*J011*J023^2*J033 + A18(2)*J013*J023^2*J031 + A18(3)*J013*J031*J033^2 + A18(4)*J013^2*J023*J031 - A18(5)*J011*J023*J033^2 - A18(6)*J011*J013*J033^2 + A18(6)*J013^2*J031*J033 - A18(4)*J011*J013*J023*J033 + A18(5)*J013*J023*J031*J033)*T.^2)/(2*detJ0);
W18 = ((A18(1)*J011^3*J023 - A18(2)*J013*J021^3 - A18(1)*J011^2*J013*J021 + A18(2)*J011*J021^2*J023 - A18(4)*J011*J013*J021^2 + A18(3)*J011*J023*J031^2 - A18(3)*J013*J021*J031^2 + A18(4)*J011^2*J021*J023 - A18(5)*J013*J021^2*J031 + A18(6)*J011^2*J023*J031 + A18(5)*J011*J021*J023*J031 - A18(6)*J011*J013*J021*J031)*R.^2)/(2*detJ0) + ((2*A18(1)*J011^2*J012*J023 - 2*A18(2)*J013*J021^2*J022 - A18(4)*J012*J013*J021^2 + 2*A18(3)*J012*J023*J031^2 - 2*A18(3)*J013*J022*J031^2 + A18(4)*J011^2*J022*J023 - A18(5)*J012*J021^2*J033 + A18(6)*J011^2*J022*J033 - 2*A18(1)*J011*J012*J013*J021 + 2*A18(2)*J011*J021*J022*J023 + A18(4)*J011*J012*J021*J023 - A18(4)*J011*J013*J021*J022 + 2*A18(3)*J011*J022*J031*J033 - 2*A18(3)*J012*J021*J031*J033 + A18(5)*J011*J021*J022*J033 + A18(5)*J011*J022*J023*J031 + A18(5)*J012*J021*J023*J031 - 2*A18(5)*J013*J021*J022*J031 - A18(6)*J011*J012*J021*J033 + 2*A18(6)*J011*J012*J023*J031 - A18(6)*J011*J013*J022*J031 - A18(6)*J012*J013*J021*J031)*R.*S)/(2*detJ0) + (T.*(2*A18(1)*J011^2*J013*J023 + A18(4)*J011^2*J023^2 + A18(6)*J033*J011^2*J023 - 2*A18(1)*J011*J013^2*J021 - A18(6)*J033*J011*J013*J021 + A18(6)*J031*J011*J013*J023 + 2*A18(2)*J011*J021*J023^2 + A18(5)*J033*J011*J021*J023 + A18(5)*J031*J011*J023^2 + 2*A18(3)*J031*J033*J011*J023 - A18(4)*J013^2*J021^2 - A18(6)*J031*J013^2*J021 - 2*A18(2)*J013*J021^2*J023 - A18(5)*J033*J013*J021^2 - A18(5)*J031*J013*J021*J023 - 2*A18(3)*J031*J033*J013*J021).*R)/(2*detJ0) + ((A18(1)*J011*J012^2*J023 - A18(1)*J012^2*J013*J021 + A18(2)*J011*J022^2*J023 - A18(2)*J013*J021*J022^2 - A18(3)*J011*J023*J032^2 + A18(3)*J013*J021*J032^2 + A18(5)*J011*J022^2*J033 - A18(5)*J013*J022^2*J031 - A18(6)*J012^2*J021*J033 + A18(6)*J012^2*J023*J031 + A18(4)*J011*J012*J022*J023 - A18(4)*J012*J013*J021*J022 + 2*A18(3)*J011*J022*J032*J033 - 2*A18(3)*J012*J021*J032*J033 + 2*A18(3)*J012*J023*J031*J032 - 2*A18(3)*J013*J022*J031*J032 - A18(5)*J012*J021*J022*J033 + A18(5)*J012*J022*J023*J031 + A18(6)*J011*J012*J022*J033 - A18(6)*J012*J013*J022*J031)*S.^2)/(2*detJ0) - (T.*(2*A18(1)*J012*J013^2*J021 - 2*A18(2)*J011*J022*J023^2 - A18(4)*J011*J012*J023^2 - 2*A18(3)*J011*J022*J033^2 + 2*A18(3)*J012*J021*J033^2 + A18(4)*J013^2*J021*J022 - A18(5)*J012*J023^2*J031 + A18(6)*J013^2*J022*J031 - 2*A18(1)*J011*J012*J013*J023 + 2*A18(2)*J013*J021*J022*J023 - A18(4)*J011*J013*J022*J023 + A18(4)*J012*J013*J021*J023 - 2*A18(3)*J012*J023*J031*J033 + 2*A18(3)*J013*J022*J031*J033 - 2*A18(5)*J011*J022*J023*J033 + A18(5)*J012*J021*J023*J033 + A18(5)*J013*J021*J022*J033 + A18(5)*J013*J022*J023*J031 - A18(6)*J011*J012*J023*J033 - A18(6)*J011*J013*J022*J033 + 2*A18(6)*J012*J013*J021*J033 - A18(6)*J012*J013*J023*J031).*S)/(2*detJ0) - (T.^2*(A18(1)*J013^3*J021 - A18(2)*J011*J023^3 - A18(1)*J011*J013^2*J023 + A18(2)*J013*J021*J023^2 - A18(4)*J011*J013*J023^2 - A18(3)*J011*J023*J033^2 + A18(3)*J013*J021*J033^2 + A18(4)*J013^2*J021*J023 - A18(5)*J011*J023^2*J033 + A18(6)*J013^2*J021*J033 + A18(5)*J013*J021*J023*J033 - A18(6)*J011*J013*J023*J033))/(2*detJ0);

U19 = ((A19(2)*J022^3*J031 - A19(3)*J021*J032^3 - A19(1)*J012^2*J021*J032 + A19(1)*J012^2*J022*J031 - A19(2)*J021*J022^2*J032 + A19(4)*J012*J022^2*J031 + A19(3)*J022*J031*J032^2 - A19(5)*J021*J022*J032^2 - A19(6)*J012*J021*J032^2 + A19(5)*J022^2*J031*J032 - A19(4)*J012*J021*J022*J032 + A19(6)*J012*J022*J031*J032)*S.^2)/(2*detJ0) - ((2*A19(1)*J012^2*J021*J033 - 2*A19(1)*J012^2*J023*J031 - 2*A19(2)*J022^2*J023*J031 - A19(4)*J011*J022^2*J033 + 2*A19(3)*J021*J032^2*J033 + A19(5)*J021*J023*J032^2 + A19(6)*J011*J023*J032^2 - A19(5)*J022^2*J031*J033 - 2*A19(1)*J011*J012*J022*J033 + 2*A19(1)*J011*J012*J023*J032 + 2*A19(2)*J021*J022*J023*J032 + A19(4)*J011*J022*J023*J032 + A19(4)*J012*J021*J022*J033 + A19(4)*J012*J021*J023*J032 - 2*A19(4)*J012*J022*J023*J031 - 2*A19(3)*J022*J031*J032*J033 + A19(5)*J021*J022*J032*J033 - A19(5)*J022*J023*J031*J032 - A19(6)*J011*J022*J032*J033 + 2*A19(6)*J012*J021*J032*J033 - A19(6)*J012*J022*J031*J033 - A19(6)*J012*J023*J031*J032)*S.*T)/(2*detJ0) - (R.*(2*A19(2)*J021^2*J022*J032 + A19(5)*J021^2*J032^2 + A19(4)*J012*J021^2*J032 - 2*A19(2)*J021*J022^2*J031 - A19(4)*J012*J021*J022*J031 + A19(4)*J011*J021*J022*J032 + 2*A19(3)*J021*J031*J032^2 + A19(6)*J012*J021*J031*J032 + A19(6)*J011*J021*J032^2 + 2*A19(1)*J011*J012*J021*J032 - A19(5)*J022^2*J031^2 - A19(4)*J011*J022^2*J031 - 2*A19(3)*J022*J031^2*J032 - A19(6)*J012*J022*J031^2 - A19(6)*J011*J022*J031*J032 - 2*A19(1)*J011*J012*J022*J031).*S)/(2*detJ0) + ((A19(1)*J013^2*J021*J032 - A19(1)*J013^2*J022*J031 - A19(2)*J021*J023^2*J032 + A19(2)*J022*J023^2*J031 - A19(4)*J011*J023^2*J032 + A19(4)*J012*J023^2*J031 - A19(3)*J021*J032*J033^2 + A19(3)*J022*J031*J033^2 + A19(6)*J011*J022*J033^2 - A19(6)*J012*J021*J033^2 + 2*A19(1)*J011*J013*J022*J033 - 2*A19(1)*J011*J013*J023*J032 - 2*A19(1)*J012*J013*J021*J033 + 2*A19(1)*J012*J013*J023*J031 + A19(4)*J011*J022*J023*J033 - A19(4)*J012*J021*J023*J033 - A19(5)*J021*J023*J032*J033 + A19(5)*J022*J023*J031*J033 - A19(6)*J011*J023*J032*J033 + A19(6)*J012*J023*J031*J033)*T.^2)/(2*detJ0) + (R.*(2*A19(1)*J011^2*J022*J033 - 2*A19(1)*J011^2*J023*J032 - 2*A19(2)*J021^2*J023*J032 - A19(4)*J012*J021^2*J033 + 2*A19(3)*J022*J031^2*J033 + A19(5)*J022*J023*J031^2 + A19(6)*J012*J023*J031^2 - A19(5)*J021^2*J032*J033 - 2*A19(1)*J011*J012*J021*J033 + 2*A19(1)*J011*J012*J023*J031 + 2*A19(2)*J021*J022*J023*J031 + A19(4)*J011*J021*J022*J033 - 2*A19(4)*J011*J021*J023*J032 + A19(4)*J011*J022*J023*J031 + A19(4)*J012*J021*J023*J031 - 2*A19(3)*J021*J031*J032*J033 + A19(5)*J021*J022*J031*J033 - A19(5)*J021*J023*J031*J032 - A19(6)*J011*J021*J032*J033 + 2*A19(6)*J011*J022*J031*J033 - A19(6)*J011*J023*J031*J032 - A19(6)*J012*J021*J031*J033).*T)/(2*detJ0) - (R.^2*(A19(2)*J021^3*J032 - A19(3)*J022*J031^3 + A19(1)*J011^2*J021*J032 - A19(1)*J011^2*J022*J031 - A19(2)*J021^2*J022*J031 + A19(4)*J011*J021^2*J032 + A19(3)*J021*J031^2*J032 - A19(5)*J021*J022*J031^2 - A19(6)*J011*J022*J031^2 + A19(5)*J021^2*J031*J032 - A19(4)*J011*J021*J022*J031 + A19(6)*J011*J021*J031*J032))/(2*detJ0);
V19 = ((A19(1)*J011^3*J032 - A19(3)*J012*J031^3 - A19(1)*J011^2*J012*J031 + A19(2)*J011*J021^2*J032 - A19(2)*J012*J021^2*J031 + A19(3)*J011*J031^2*J032 + A19(4)*J011^2*J021*J032 - A19(5)*J012*J021*J031^2 - A19(6)*J011*J012*J031^2 + A19(6)*J011^2*J031*J032 - A19(4)*J011*J012*J021*J031 + A19(5)*J011*J021*J031*J032)*R.^2)/(2*detJ0) + ((2*A19(1)*J011^2*J013*J032 - 2*A19(2)*J012*J021^2*J033 + 2*A19(2)*J013*J021^2*J032 - 2*A19(3)*J012*J031^2*J033 + A19(4)*J011^2*J022*J033 - A19(5)*J013*J022*J031^2 - A19(6)*J012*J013*J031^2 + A19(6)*J011^2*J032*J033 - 2*A19(1)*J011*J012*J013*J031 + 2*A19(2)*J011*J021*J022*J033 - 2*A19(2)*J013*J021*J022*J031 - A19(4)*J011*J012*J021*J033 + 2*A19(4)*J011*J013*J021*J032 - A19(4)*J011*J013*J022*J031 - A19(4)*J012*J013*J021*J031 + 2*A19(3)*J011*J031*J032*J033 + A19(5)*J011*J021*J032*J033 + A19(5)*J011*J022*J031*J033 - 2*A19(5)*J012*J021*J031*J033 + A19(5)*J013*J021*J031*J032 - A19(6)*J011*J012*J031*J033 + A19(6)*J011*J013*J031*J032)*R.*T)/(2*detJ0) + (S.*(2*A19(1)*J011^2*J012*J032 + A19(6)*J011^2*J032^2 + A19(4)*J022*J011^2*J032 - 2*A19(1)*J011*J012^2*J031 - A19(4)*J022*J011*J012*J031 + A19(4)*J021*J011*J012*J032 + 2*A19(3)*J011*J031*J032^2 + A19(5)*J022*J011*J031*J032 + A19(5)*J021*J011*J032^2 + 2*A19(2)*J021*J022*J011*J032 - A19(6)*J012^2*J031^2 - A19(4)*J021*J012^2*J031 - 2*A19(3)*J012*J031^2*J032 - A19(5)*J022*J012*J031^2 - A19(5)*J021*J012*J031*J032 - 2*A19(2)*J021*J022*J012*J031).*R)/(2*detJ0) + ((A19(1)*J011*J013^2*J032 - A19(1)*J012*J013^2*J031 - A19(2)*J011*J023^2*J032 + A19(2)*J012*J023^2*J031 + A19(3)*J011*J032*J033^2 - A19(3)*J012*J031*J033^2 + A19(4)*J013^2*J021*J032 - A19(4)*J013^2*J022*J031 + A19(5)*J011*J022*J033^2 - A19(5)*J012*J021*J033^2 + 2*A19(2)*J011*J022*J023*J033 - 2*A19(2)*J012*J021*J023*J033 + 2*A19(2)*J013*J021*J023*J032 - 2*A19(2)*J013*J022*J023*J031 + A19(4)*J011*J013*J022*J033 - A19(4)*J012*J013*J021*J033 + A19(5)*J013*J021*J032*J033 - A19(5)*J013*J022*J031*J033 + A19(6)*J011*J013*J032*J033 - A19(6)*J012*J013*J031*J033)*T.^2)/(2*detJ0) - (S.*(2*A19(1)*J012^2*J013*J031 - 2*A19(2)*J011*J022^2*J033 + 2*A19(2)*J013*J022^2*J031 - 2*A19(3)*J011*J032^2*J033 + A19(4)*J012^2*J021*J033 - A19(5)*J013*J021*J032^2 - A19(6)*J011*J013*J032^2 + A19(6)*J012^2*J031*J033 - 2*A19(1)*J011*J012*J013*J032 + 2*A19(2)*J012*J021*J022*J033 - 2*A19(2)*J013*J021*J022*J032 - A19(4)*J011*J012*J022*J033 - A19(4)*J011*J013*J022*J032 - A19(4)*J012*J013*J021*J032 + 2*A19(4)*J012*J013*J022*J031 + 2*A19(3)*J012*J031*J032*J033 - 2*A19(5)*J011*J022*J032*J033 + A19(5)*J012*J021*J032*J033 + A19(5)*J012*J022*J031*J033 + A19(5)*J013*J022*J031*J032 - A19(6)*J011*J012*J032*J033 + A19(6)*J012*J013*J031*J032).*T)/(2*detJ0) - (S.^2*(A19(1)*J012^3*J031 - A19(3)*J011*J032^3 - A19(1)*J011*J012^2*J032 - A19(2)*J011*J022^2*J032 + A19(2)*J012*J022^2*J031 + A19(3)*J012*J031*J032^2 + A19(4)*J012^2*J022*J031 - A19(5)*J011*J022*J032^2 - A19(6)*J011*J012*J032^2 + A19(6)*J012^2*J031*J032 - A19(4)*J011*J012*J022*J032 + A19(5)*J012*J022*J031*J032))/(2*detJ0);
W19 = ((A19(1)*J012^3*J021 - A19(2)*J011*J022^3 - A19(1)*J011*J012^2*J022 + A19(2)*J012*J021*J022^2 - A19(4)*J011*J012*J022^2 - A19(3)*J011*J022*J032^2 + A19(3)*J012*J021*J032^2 + A19(4)*J012^2*J021*J022 - A19(5)*J011*J022^2*J032 + A19(6)*J012^2*J021*J032 + A19(5)*J012*J021*J022*J032 - A19(6)*J011*J012*J022*J032)*S.^2)/(2*detJ0) - ((2*A19(1)*J011^2*J012*J022 + A19(4)*J011^2*J022^2 + A19(6)*J032*J011^2*J022 - 2*A19(1)*J011*J012^2*J021 - A19(6)*J032*J011*J012*J021 + A19(6)*J031*J011*J012*J022 + 2*A19(2)*J011*J021*J022^2 + A19(5)*J032*J011*J021*J022 + A19(5)*J031*J011*J022^2 + 2*A19(3)*J031*J032*J011*J022 - A19(4)*J012^2*J021^2 - A19(6)*J031*J012^2*J021 - 2*A19(2)*J012*J021^2*J022 - A19(5)*J032*J012*J021^2 - A19(5)*J031*J012*J021*J022 - 2*A19(3)*J031*J032*J012*J021)*R.*S)/(2*detJ0) - ((2*A19(1)*J011^2*J013*J022 - 2*A19(2)*J012*J021^2*J023 - A19(4)*J012*J013*J021^2 - 2*A19(3)*J012*J023*J031^2 + 2*A19(3)*J013*J022*J031^2 + A19(4)*J011^2*J022*J023 - A19(5)*J013*J021^2*J032 + A19(6)*J011^2*J023*J032 - 2*A19(1)*J011*J012*J013*J021 + 2*A19(2)*J011*J021*J022*J023 - A19(4)*J011*J012*J021*J023 + A19(4)*J011*J013*J021*J022 + 2*A19(3)*J011*J023*J031*J032 - 2*A19(3)*J013*J021*J031*J032 + A19(5)*J011*J021*J023*J032 + A19(5)*J011*J022*J023*J031 - 2*A19(5)*J012*J021*J023*J031 + A19(5)*J013*J021*J022*J031 - A19(6)*J011*J012*J023*J031 - A19(6)*J011*J013*J021*J032 + 2*A19(6)*J011*J013*J022*J031 - A19(6)*J012*J013*J021*J031)*R.*T)/(2*detJ0) - ((A19(1)*J011^3*J022 - A19(2)*J012*J021^3 - A19(1)*J011^2*J012*J021 + A19(2)*J011*J021^2*J022 - A19(4)*J011*J012*J021^2 + A19(3)*J011*J022*J031^2 - A19(3)*J012*J021*J031^2 + A19(4)*J011^2*J021*J022 - A19(5)*J012*J021^2*J031 + A19(6)*J011^2*J022*J031 + A19(5)*J011*J021*J022*J031 - A19(6)*J011*J012*J021*J031)*R.^2)/(2*detJ0) + ((2*A19(1)*J012^2*J013*J021 - 2*A19(2)*J011*J022^2*J023 - A19(4)*J011*J013*J022^2 - 2*A19(3)*J011*J023*J032^2 + 2*A19(3)*J013*J021*J032^2 + A19(4)*J012^2*J021*J023 - A19(5)*J013*J022^2*J031 + A19(6)*J012^2*J023*J031 - 2*A19(1)*J011*J012*J013*J022 + 2*A19(2)*J012*J021*J022*J023 - A19(4)*J011*J012*J022*J023 + A19(4)*J012*J013*J021*J022 + 2*A19(3)*J012*J023*J031*J032 - 2*A19(3)*J013*J022*J031*J032 - 2*A19(5)*J011*J022*J023*J032 + A19(5)*J012*J021*J023*J032 + A19(5)*J012*J022*J023*J031 + A19(5)*J013*J021*J022*J032 - A19(6)*J011*J012*J023*J032 - A19(6)*J011*J013*J022*J032 + 2*A19(6)*J012*J013*J021*J032 - A19(6)*J012*J013*J022*J031)*S.*T)/(2*detJ0) - ((A19(1)*J011*J013^2*J022 - A19(1)*J012*J013^2*J021 + A19(2)*J011*J022*J023^2 - A19(2)*J012*J021*J023^2 - A19(3)*J011*J022*J033^2 + A19(3)*J012*J021*J033^2 + A19(5)*J011*J023^2*J032 - A19(5)*J012*J023^2*J031 - A19(6)*J013^2*J021*J032 + A19(6)*J013^2*J022*J031 + A19(4)*J011*J013*J022*J023 - A19(4)*J012*J013*J021*J023 + 2*A19(3)*J011*J023*J032*J033 - 2*A19(3)*J012*J023*J031*J033 - 2*A19(3)*J013*J021*J032*J033 + 2*A19(3)*J013*J022*J031*J033 - A19(5)*J013*J021*J023*J032 + A19(5)*J013*J022*J023*J031 + A19(6)*J011*J013*J023*J032 - A19(6)*J012*J013*J023*J031)*T.^2)/(2*detJ0);

U20 = ((A20(2)*J022^3*J031 - A20(3)*J021*J032^3 - A20(1)*J012^2*J021*J032 + A20(1)*J012^2*J022*J031 - A20(2)*J021*J022^2*J032 + A20(4)*J012*J022^2*J031 + A20(3)*J022*J031*J032^2 - A20(5)*J021*J022*J032^2 - A20(6)*J012*J021*J032^2 + A20(5)*J022^2*J031*J032 - A20(4)*J012*J021*J022*J032 + A20(6)*J012*J022*J031*J032)*S.^2)/(2*detJ0) - ((2*A20(1)*J012^2*J021*J033 - 2*A20(1)*J012^2*J023*J031 - 2*A20(2)*J022^2*J023*J031 - A20(4)*J011*J022^2*J033 + 2*A20(3)*J021*J032^2*J033 + A20(5)*J021*J023*J032^2 + A20(6)*J011*J023*J032^2 - A20(5)*J022^2*J031*J033 - 2*A20(1)*J011*J012*J022*J033 + 2*A20(1)*J011*J012*J023*J032 + 2*A20(2)*J021*J022*J023*J032 + A20(4)*J011*J022*J023*J032 + A20(4)*J012*J021*J022*J033 + A20(4)*J012*J021*J023*J032 - 2*A20(4)*J012*J022*J023*J031 - 2*A20(3)*J022*J031*J032*J033 + A20(5)*J021*J022*J032*J033 - A20(5)*J022*J023*J031*J032 - A20(6)*J011*J022*J032*J033 + 2*A20(6)*J012*J021*J032*J033 - A20(6)*J012*J022*J031*J033 - A20(6)*J012*J023*J031*J032)*S.*T)/(2*detJ0) - (R.*(2*A20(2)*J021^2*J022*J032 + A20(5)*J021^2*J032^2 + A20(4)*J012*J021^2*J032 - 2*A20(2)*J021*J022^2*J031 - A20(4)*J012*J021*J022*J031 + A20(4)*J011*J021*J022*J032 + 2*A20(3)*J021*J031*J032^2 + A20(6)*J012*J021*J031*J032 + A20(6)*J011*J021*J032^2 + 2*A20(1)*J011*J012*J021*J032 - A20(5)*J022^2*J031^2 - A20(4)*J011*J022^2*J031 - 2*A20(3)*J022*J031^2*J032 - A20(6)*J012*J022*J031^2 - A20(6)*J011*J022*J031*J032 - 2*A20(1)*J011*J012*J022*J031).*S)/(2*detJ0) + ((A20(1)*J013^2*J021*J032 - A20(1)*J013^2*J022*J031 - A20(2)*J021*J023^2*J032 + A20(2)*J022*J023^2*J031 - A20(4)*J011*J023^2*J032 + A20(4)*J012*J023^2*J031 - A20(3)*J021*J032*J033^2 + A20(3)*J022*J031*J033^2 + A20(6)*J011*J022*J033^2 - A20(6)*J012*J021*J033^2 + 2*A20(1)*J011*J013*J022*J033 - 2*A20(1)*J011*J013*J023*J032 - 2*A20(1)*J012*J013*J021*J033 + 2*A20(1)*J012*J013*J023*J031 + A20(4)*J011*J022*J023*J033 - A20(4)*J012*J021*J023*J033 - A20(5)*J021*J023*J032*J033 + A20(5)*J022*J023*J031*J033 - A20(6)*J011*J023*J032*J033 + A20(6)*J012*J023*J031*J033)*T.^2)/(2*detJ0) + (R.*(2*A20(1)*J011^2*J022*J033 - 2*A20(1)*J011^2*J023*J032 - 2*A20(2)*J021^2*J023*J032 - A20(4)*J012*J021^2*J033 + 2*A20(3)*J022*J031^2*J033 + A20(5)*J022*J023*J031^2 + A20(6)*J012*J023*J031^2 - A20(5)*J021^2*J032*J033 - 2*A20(1)*J011*J012*J021*J033 + 2*A20(1)*J011*J012*J023*J031 + 2*A20(2)*J021*J022*J023*J031 + A20(4)*J011*J021*J022*J033 - 2*A20(4)*J011*J021*J023*J032 + A20(4)*J011*J022*J023*J031 + A20(4)*J012*J021*J023*J031 - 2*A20(3)*J021*J031*J032*J033 + A20(5)*J021*J022*J031*J033 - A20(5)*J021*J023*J031*J032 - A20(6)*J011*J021*J032*J033 + 2*A20(6)*J011*J022*J031*J033 - A20(6)*J011*J023*J031*J032 - A20(6)*J012*J021*J031*J033).*T)/(2*detJ0) - (R.^2*(A20(2)*J021^3*J032 - A20(3)*J022*J031^3 + A20(1)*J011^2*J021*J032 - A20(1)*J011^2*J022*J031 - A20(2)*J021^2*J022*J031 + A20(4)*J011*J021^2*J032 + A20(3)*J021*J031^2*J032 - A20(5)*J021*J022*J031^2 - A20(6)*J011*J022*J031^2 + A20(5)*J021^2*J031*J032 - A20(4)*J011*J021*J022*J031 + A20(6)*J011*J021*J031*J032))/(2*detJ0);
V20 = ((A20(1)*J011^3*J032 - A20(3)*J012*J031^3 - A20(1)*J011^2*J012*J031 + A20(2)*J011*J021^2*J032 - A20(2)*J012*J021^2*J031 + A20(3)*J011*J031^2*J032 + A20(4)*J011^2*J021*J032 - A20(5)*J012*J021*J031^2 - A20(6)*J011*J012*J031^2 + A20(6)*J011^2*J031*J032 - A20(4)*J011*J012*J021*J031 + A20(5)*J011*J021*J031*J032)*R.^2)/(2*detJ0) + ((2*A20(1)*J011^2*J013*J032 - 2*A20(2)*J012*J021^2*J033 + 2*A20(2)*J013*J021^2*J032 - 2*A20(3)*J012*J031^2*J033 + A20(4)*J011^2*J022*J033 - A20(5)*J013*J022*J031^2 - A20(6)*J012*J013*J031^2 + A20(6)*J011^2*J032*J033 - 2*A20(1)*J011*J012*J013*J031 + 2*A20(2)*J011*J021*J022*J033 - 2*A20(2)*J013*J021*J022*J031 - A20(4)*J011*J012*J021*J033 + 2*A20(4)*J011*J013*J021*J032 - A20(4)*J011*J013*J022*J031 - A20(4)*J012*J013*J021*J031 + 2*A20(3)*J011*J031*J032*J033 + A20(5)*J011*J021*J032*J033 + A20(5)*J011*J022*J031*J033 - 2*A20(5)*J012*J021*J031*J033 + A20(5)*J013*J021*J031*J032 - A20(6)*J011*J012*J031*J033 + A20(6)*J011*J013*J031*J032)*R.*T)/(2*detJ0) + (S.*(2*A20(1)*J011^2*J012*J032 + A20(6)*J011^2*J032^2 + A20(4)*J022*J011^2*J032 - 2*A20(1)*J011*J012^2*J031 - A20(4)*J022*J011*J012*J031 + A20(4)*J021*J011*J012*J032 + 2*A20(3)*J011*J031*J032^2 + A20(5)*J022*J011*J031*J032 + A20(5)*J021*J011*J032^2 + 2*A20(2)*J021*J022*J011*J032 - A20(6)*J012^2*J031^2 - A20(4)*J021*J012^2*J031 - 2*A20(3)*J012*J031^2*J032 - A20(5)*J022*J012*J031^2 - A20(5)*J021*J012*J031*J032 - 2*A20(2)*J021*J022*J012*J031).*R)/(2*detJ0) + ((A20(1)*J011*J013^2*J032 - A20(1)*J012*J013^2*J031 - A20(2)*J011*J023^2*J032 + A20(2)*J012*J023^2*J031 + A20(3)*J011*J032*J033^2 - A20(3)*J012*J031*J033^2 + A20(4)*J013^2*J021*J032 - A20(4)*J013^2*J022*J031 + A20(5)*J011*J022*J033^2 - A20(5)*J012*J021*J033^2 + 2*A20(2)*J011*J022*J023*J033 - 2*A20(2)*J012*J021*J023*J033 + 2*A20(2)*J013*J021*J023*J032 - 2*A20(2)*J013*J022*J023*J031 + A20(4)*J011*J013*J022*J033 - A20(4)*J012*J013*J021*J033 + A20(5)*J013*J021*J032*J033 - A20(5)*J013*J022*J031*J033 + A20(6)*J011*J013*J032*J033 - A20(6)*J012*J013*J031*J033)*T.^2)/(2*detJ0) - (S.*(2*A20(1)*J012^2*J013*J031 - 2*A20(2)*J011*J022^2*J033 + 2*A20(2)*J013*J022^2*J031 - 2*A20(3)*J011*J032^2*J033 + A20(4)*J012^2*J021*J033 - A20(5)*J013*J021*J032^2 - A20(6)*J011*J013*J032^2 + A20(6)*J012^2*J031*J033 - 2*A20(1)*J011*J012*J013*J032 + 2*A20(2)*J012*J021*J022*J033 - 2*A20(2)*J013*J021*J022*J032 - A20(4)*J011*J012*J022*J033 - A20(4)*J011*J013*J022*J032 - A20(4)*J012*J013*J021*J032 + 2*A20(4)*J012*J013*J022*J031 + 2*A20(3)*J012*J031*J032*J033 - 2*A20(5)*J011*J022*J032*J033 + A20(5)*J012*J021*J032*J033 + A20(5)*J012*J022*J031*J033 + A20(5)*J013*J022*J031*J032 - A20(6)*J011*J012*J032*J033 + A20(6)*J012*J013*J031*J032).*T)/(2*detJ0) - (S.^2*(A20(1)*J012^3*J031 - A20(3)*J011*J032^3 - A20(1)*J011*J012^2*J032 - A20(2)*J011*J022^2*J032 + A20(2)*J012*J022^2*J031 + A20(3)*J012*J031*J032^2 + A20(4)*J012^2*J022*J031 - A20(5)*J011*J022*J032^2 - A20(6)*J011*J012*J032^2 + A20(6)*J012^2*J031*J032 - A20(4)*J011*J012*J022*J032 + A20(5)*J012*J022*J031*J032))/(2*detJ0);
W20 = ((A20(1)*J012^3*J021 - A20(2)*J011*J022^3 - A20(1)*J011*J012^2*J022 + A20(2)*J012*J021*J022^2 - A20(4)*J011*J012*J022^2 - A20(3)*J011*J022*J032^2 + A20(3)*J012*J021*J032^2 + A20(4)*J012^2*J021*J022 - A20(5)*J011*J022^2*J032 + A20(6)*J012^2*J021*J032 + A20(5)*J012*J021*J022*J032 - A20(6)*J011*J012*J022*J032)*S.^2)/(2*detJ0) - ((2*A20(1)*J011^2*J012*J022 + A20(4)*J011^2*J022^2 + A20(6)*J032*J011^2*J022 - 2*A20(1)*J011*J012^2*J021 - A20(6)*J032*J011*J012*J021 + A20(6)*J031*J011*J012*J022 + 2*A20(2)*J011*J021*J022^2 + A20(5)*J032*J011*J021*J022 + A20(5)*J031*J011*J022^2 + 2*A20(3)*J031*J032*J011*J022 - A20(4)*J012^2*J021^2 - A20(6)*J031*J012^2*J021 - 2*A20(2)*J012*J021^2*J022 - A20(5)*J032*J012*J021^2 - A20(5)*J031*J012*J021*J022 - 2*A20(3)*J031*J032*J012*J021)*R.*S)/(2*detJ0) - ((2*A20(1)*J011^2*J013*J022 - 2*A20(2)*J012*J021^2*J023 - A20(4)*J012*J013*J021^2 - 2*A20(3)*J012*J023*J031^2 + 2*A20(3)*J013*J022*J031^2 + A20(4)*J011^2*J022*J023 - A20(5)*J013*J021^2*J032 + A20(6)*J011^2*J023*J032 - 2*A20(1)*J011*J012*J013*J021 + 2*A20(2)*J011*J021*J022*J023 - A20(4)*J011*J012*J021*J023 + A20(4)*J011*J013*J021*J022 + 2*A20(3)*J011*J023*J031*J032 - 2*A20(3)*J013*J021*J031*J032 + A20(5)*J011*J021*J023*J032 + A20(5)*J011*J022*J023*J031 - 2*A20(5)*J012*J021*J023*J031 + A20(5)*J013*J021*J022*J031 - A20(6)*J011*J012*J023*J031 - A20(6)*J011*J013*J021*J032 + 2*A20(6)*J011*J013*J022*J031 - A20(6)*J012*J013*J021*J031)*R.*T)/(2*detJ0) - ((A20(1)*J011^3*J022 - A20(2)*J012*J021^3 - A20(1)*J011^2*J012*J021 + A20(2)*J011*J021^2*J022 - A20(4)*J011*J012*J021^2 + A20(3)*J011*J022*J031^2 - A20(3)*J012*J021*J031^2 + A20(4)*J011^2*J021*J022 - A20(5)*J012*J021^2*J031 + A20(6)*J011^2*J022*J031 + A20(5)*J011*J021*J022*J031 - A20(6)*J011*J012*J021*J031)*R.^2)/(2*detJ0) + ((2*A20(1)*J012^2*J013*J021 - 2*A20(2)*J011*J022^2*J023 - A20(4)*J011*J013*J022^2 - 2*A20(3)*J011*J023*J032^2 + 2*A20(3)*J013*J021*J032^2 + A20(4)*J012^2*J021*J023 - A20(5)*J013*J022^2*J031 + A20(6)*J012^2*J023*J031 - 2*A20(1)*J011*J012*J013*J022 + 2*A20(2)*J012*J021*J022*J023 - A20(4)*J011*J012*J022*J023 + A20(4)*J012*J013*J021*J022 + 2*A20(3)*J012*J023*J031*J032 - 2*A20(3)*J013*J022*J031*J032 - 2*A20(5)*J011*J022*J023*J032 + A20(5)*J012*J021*J023*J032 + A20(5)*J012*J022*J023*J031 + A20(5)*J013*J021*J022*J032 - A20(6)*J011*J012*J023*J032 - A20(6)*J011*J013*J022*J032 + 2*A20(6)*J012*J013*J021*J032 - A20(6)*J012*J013*J022*J031)*S.*T)/(2*detJ0) - ((A20(1)*J011*J013^2*J022 - A20(1)*J012*J013^2*J021 + A20(2)*J011*J022*J023^2 - A20(2)*J012*J021*J023^2 - A20(3)*J011*J022*J033^2 + A20(3)*J012*J021*J033^2 + A20(5)*J011*J023^2*J032 - A20(5)*J012*J023^2*J031 - A20(6)*J013^2*J021*J032 + A20(6)*J013^2*J022*J031 + A20(4)*J011*J013*J022*J023 - A20(4)*J012*J013*J021*J023 + 2*A20(3)*J011*J023*J032*J033 - 2*A20(3)*J012*J023*J031*J033 - 2*A20(3)*J013*J021*J032*J033 + 2*A20(3)*J013*J022*J031*J033 - A20(5)*J013*J021*J023*J032 + A20(5)*J013*J022*J023*J031 + A20(6)*J011*J013*J023*J032 - A20(6)*J012*J013*J023*J031)*T.^2)/(2*detJ0);

U21 = ((A21(2)*J022^3*J031 - A21(3)*J021*J032^3 - A21(1)*J012^2*J021*J032 + A21(1)*J012^2*J022*J031 - A21(2)*J021*J022^2*J032 + A21(4)*J012*J022^2*J031 + A21(3)*J022*J031*J032^2 - A21(5)*J021*J022*J032^2 - A21(6)*J012*J021*J032^2 + A21(5)*J022^2*J031*J032 - A21(4)*J012*J021*J022*J032 + A21(6)*J012*J022*J031*J032)*S.^2)/(2*detJ0) - ((2*A21(1)*J012^2*J021*J033 - 2*A21(1)*J012^2*J023*J031 - 2*A21(2)*J022^2*J023*J031 - A21(4)*J011*J022^2*J033 + 2*A21(3)*J021*J032^2*J033 + A21(5)*J021*J023*J032^2 + A21(6)*J011*J023*J032^2 - A21(5)*J022^2*J031*J033 - 2*A21(1)*J011*J012*J022*J033 + 2*A21(1)*J011*J012*J023*J032 + 2*A21(2)*J021*J022*J023*J032 + A21(4)*J011*J022*J023*J032 + A21(4)*J012*J021*J022*J033 + A21(4)*J012*J021*J023*J032 - 2*A21(4)*J012*J022*J023*J031 - 2*A21(3)*J022*J031*J032*J033 + A21(5)*J021*J022*J032*J033 - A21(5)*J022*J023*J031*J032 - A21(6)*J011*J022*J032*J033 + 2*A21(6)*J012*J021*J032*J033 - A21(6)*J012*J022*J031*J033 - A21(6)*J012*J023*J031*J032)*S.*T)/(2*detJ0) - (R.*(2*A21(2)*J021^2*J022*J032 + A21(5)*J021^2*J032^2 + A21(4)*J012*J021^2*J032 - 2*A21(2)*J021*J022^2*J031 - A21(4)*J012*J021*J022*J031 + A21(4)*J011*J021*J022*J032 + 2*A21(3)*J021*J031*J032^2 + A21(6)*J012*J021*J031*J032 + A21(6)*J011*J021*J032^2 + 2*A21(1)*J011*J012*J021*J032 - A21(5)*J022^2*J031^2 - A21(4)*J011*J022^2*J031 - 2*A21(3)*J022*J031^2*J032 - A21(6)*J012*J022*J031^2 - A21(6)*J011*J022*J031*J032 - 2*A21(1)*J011*J012*J022*J031).*S)/(2*detJ0) + ((A21(1)*J013^2*J021*J032 - A21(1)*J013^2*J022*J031 - A21(2)*J021*J023^2*J032 + A21(2)*J022*J023^2*J031 - A21(4)*J011*J023^2*J032 + A21(4)*J012*J023^2*J031 - A21(3)*J021*J032*J033^2 + A21(3)*J022*J031*J033^2 + A21(6)*J011*J022*J033^2 - A21(6)*J012*J021*J033^2 + 2*A21(1)*J011*J013*J022*J033 - 2*A21(1)*J011*J013*J023*J032 - 2*A21(1)*J012*J013*J021*J033 + 2*A21(1)*J012*J013*J023*J031 + A21(4)*J011*J022*J023*J033 - A21(4)*J012*J021*J023*J033 - A21(5)*J021*J023*J032*J033 + A21(5)*J022*J023*J031*J033 - A21(6)*J011*J023*J032*J033 + A21(6)*J012*J023*J031*J033)*T.^2)/(2*detJ0) + (R.*(2*A21(1)*J011^2*J022*J033 - 2*A21(1)*J011^2*J023*J032 - 2*A21(2)*J021^2*J023*J032 - A21(4)*J012*J021^2*J033 + 2*A21(3)*J022*J031^2*J033 + A21(5)*J022*J023*J031^2 + A21(6)*J012*J023*J031^2 - A21(5)*J021^2*J032*J033 - 2*A21(1)*J011*J012*J021*J033 + 2*A21(1)*J011*J012*J023*J031 + 2*A21(2)*J021*J022*J023*J031 + A21(4)*J011*J021*J022*J033 - 2*A21(4)*J011*J021*J023*J032 + A21(4)*J011*J022*J023*J031 + A21(4)*J012*J021*J023*J031 - 2*A21(3)*J021*J031*J032*J033 + A21(5)*J021*J022*J031*J033 - A21(5)*J021*J023*J031*J032 - A21(6)*J011*J021*J032*J033 + 2*A21(6)*J011*J022*J031*J033 - A21(6)*J011*J023*J031*J032 - A21(6)*J012*J021*J031*J033).*T)/(2*detJ0) - (R.^2*(A21(2)*J021^3*J032 - A21(3)*J022*J031^3 + A21(1)*J011^2*J021*J032 - A21(1)*J011^2*J022*J031 - A21(2)*J021^2*J022*J031 + A21(4)*J011*J021^2*J032 + A21(3)*J021*J031^2*J032 - A21(5)*J021*J022*J031^2 - A21(6)*J011*J022*J031^2 + A21(5)*J021^2*J031*J032 - A21(4)*J011*J021*J022*J031 + A21(6)*J011*J021*J031*J032))/(2*detJ0);
V21 = ((A21(1)*J011^3*J032 - A21(3)*J012*J031^3 - A21(1)*J011^2*J012*J031 + A21(2)*J011*J021^2*J032 - A21(2)*J012*J021^2*J031 + A21(3)*J011*J031^2*J032 + A21(4)*J011^2*J021*J032 - A21(5)*J012*J021*J031^2 - A21(6)*J011*J012*J031^2 + A21(6)*J011^2*J031*J032 - A21(4)*J011*J012*J021*J031 + A21(5)*J011*J021*J031*J032)*R.^2)/(2*detJ0) + ((2*A21(1)*J011^2*J013*J032 - 2*A21(2)*J012*J021^2*J033 + 2*A21(2)*J013*J021^2*J032 - 2*A21(3)*J012*J031^2*J033 + A21(4)*J011^2*J022*J033 - A21(5)*J013*J022*J031^2 - A21(6)*J012*J013*J031^2 + A21(6)*J011^2*J032*J033 - 2*A21(1)*J011*J012*J013*J031 + 2*A21(2)*J011*J021*J022*J033 - 2*A21(2)*J013*J021*J022*J031 - A21(4)*J011*J012*J021*J033 + 2*A21(4)*J011*J013*J021*J032 - A21(4)*J011*J013*J022*J031 - A21(4)*J012*J013*J021*J031 + 2*A21(3)*J011*J031*J032*J033 + A21(5)*J011*J021*J032*J033 + A21(5)*J011*J022*J031*J033 - 2*A21(5)*J012*J021*J031*J033 + A21(5)*J013*J021*J031*J032 - A21(6)*J011*J012*J031*J033 + A21(6)*J011*J013*J031*J032)*R.*T)/(2*detJ0) + (S.*(2*A21(1)*J011^2*J012*J032 + A21(6)*J011^2*J032^2 + A21(4)*J022*J011^2*J032 - 2*A21(1)*J011*J012^2*J031 - A21(4)*J022*J011*J012*J031 + A21(4)*J021*J011*J012*J032 + 2*A21(3)*J011*J031*J032^2 + A21(5)*J022*J011*J031*J032 + A21(5)*J021*J011*J032^2 + 2*A21(2)*J021*J022*J011*J032 - A21(6)*J012^2*J031^2 - A21(4)*J021*J012^2*J031 - 2*A21(3)*J012*J031^2*J032 - A21(5)*J022*J012*J031^2 - A21(5)*J021*J012*J031*J032 - 2*A21(2)*J021*J022*J012*J031).*R)/(2*detJ0) + ((A21(1)*J011*J013^2*J032 - A21(1)*J012*J013^2*J031 - A21(2)*J011*J023^2*J032 + A21(2)*J012*J023^2*J031 + A21(3)*J011*J032*J033^2 - A21(3)*J012*J031*J033^2 + A21(4)*J013^2*J021*J032 - A21(4)*J013^2*J022*J031 + A21(5)*J011*J022*J033^2 - A21(5)*J012*J021*J033^2 + 2*A21(2)*J011*J022*J023*J033 - 2*A21(2)*J012*J021*J023*J033 + 2*A21(2)*J013*J021*J023*J032 - 2*A21(2)*J013*J022*J023*J031 + A21(4)*J011*J013*J022*J033 - A21(4)*J012*J013*J021*J033 + A21(5)*J013*J021*J032*J033 - A21(5)*J013*J022*J031*J033 + A21(6)*J011*J013*J032*J033 - A21(6)*J012*J013*J031*J033)*T.^2)/(2*detJ0) - (S.*(2*A21(1)*J012^2*J013*J031 - 2*A21(2)*J011*J022^2*J033 + 2*A21(2)*J013*J022^2*J031 - 2*A21(3)*J011*J032^2*J033 + A21(4)*J012^2*J021*J033 - A21(5)*J013*J021*J032^2 - A21(6)*J011*J013*J032^2 + A21(6)*J012^2*J031*J033 - 2*A21(1)*J011*J012*J013*J032 + 2*A21(2)*J012*J021*J022*J033 - 2*A21(2)*J013*J021*J022*J032 - A21(4)*J011*J012*J022*J033 - A21(4)*J011*J013*J022*J032 - A21(4)*J012*J013*J021*J032 + 2*A21(4)*J012*J013*J022*J031 + 2*A21(3)*J012*J031*J032*J033 - 2*A21(5)*J011*J022*J032*J033 + A21(5)*J012*J021*J032*J033 + A21(5)*J012*J022*J031*J033 + A21(5)*J013*J022*J031*J032 - A21(6)*J011*J012*J032*J033 + A21(6)*J012*J013*J031*J032).*T)/(2*detJ0) - (S.^2*(A21(1)*J012^3*J031 - A21(3)*J011*J032^3 - A21(1)*J011*J012^2*J032 - A21(2)*J011*J022^2*J032 + A21(2)*J012*J022^2*J031 + A21(3)*J012*J031*J032^2 + A21(4)*J012^2*J022*J031 - A21(5)*J011*J022*J032^2 - A21(6)*J011*J012*J032^2 + A21(6)*J012^2*J031*J032 - A21(4)*J011*J012*J022*J032 + A21(5)*J012*J022*J031*J032))/(2*detJ0);
W21 = ((2*A21(1)*J012^2*J013*J021 - 2*A21(2)*J011*J022^2*J023 - A21(4)*J011*J013*J022^2 - 2*A21(3)*J011*J023*J032^2 + 2*A21(3)*J013*J021*J032^2 + A21(4)*J012^2*J021*J023 - A21(5)*J013*J022^2*J031 + A21(6)*J012^2*J023*J031 - 2*A21(1)*J011*J012*J013*J022 + 2*A21(2)*J012*J021*J022*J023 - A21(4)*J011*J012*J022*J023 + A21(4)*J012*J013*J021*J022 + 2*A21(3)*J012*J023*J031*J032 - 2*A21(3)*J013*J022*J031*J032 - 2*A21(5)*J011*J022*J023*J032 + A21(5)*J012*J021*J023*J032 + A21(5)*J012*J022*J023*J031 + A21(5)*J013*J021*J022*J032 - A21(6)*J011*J012*J023*J032 - A21(6)*J011*J013*J022*J032 + 2*A21(6)*J012*J013*J021*J032 - A21(6)*J012*J013*J022*J031)*S.*T)/(2*detJ0) - ((J011*J022 - J012*J021)*(2*A21(1)*J011*J012 + 2*A21(2)*J021*J022 + A21(4)*J011*J022 + A21(4)*J012*J021 + 2*A21(3)*J031*J032 + A21(5)*J021*J032 + A21(5)*J022*J031 + A21(6)*J011*J032 + A21(6)*J012*J031)*R.*S)/(2*detJ0) - ((2*A21(1)*J011^2*J013*J022 - 2*A21(2)*J012*J021^2*J023 - A21(4)*J012*J013*J021^2 - 2*A21(3)*J012*J023*J031^2 + 2*A21(3)*J013*J022*J031^2 + A21(4)*J011^2*J022*J023 - A21(5)*J013*J021^2*J032 + A21(6)*J011^2*J023*J032 - 2*A21(1)*J011*J012*J013*J021 + 2*A21(2)*J011*J021*J022*J023 - A21(4)*J011*J012*J021*J023 + A21(4)*J011*J013*J021*J022 + 2*A21(3)*J011*J023*J031*J032 - 2*A21(3)*J013*J021*J031*J032 + A21(5)*J011*J021*J023*J032 + A21(5)*J011*J022*J023*J031 - 2*A21(5)*J012*J021*J023*J031 + A21(5)*J013*J021*J022*J031 - A21(6)*J011*J012*J023*J031 - A21(6)*J011*J013*J021*J032 + 2*A21(6)*J011*J013*J022*J031 - A21(6)*J012*J013*J021*J031)*R.*T)/(2*detJ0) - ((J011*J022 - J012*J021)*(A21(1)*J012^2 + A21(4)*J012*J022 + A21(6)*J012*J032 + A21(2)*J022^2 + A21(5)*J022*J032 + A21(3)*J032^2)*S.^2)/(2*detJ0) - ((J011*J022 - J012*J021)*(A21(1)*J011^2 + A21(4)*J011*J021 + A21(6)*J011*J031 + A21(2)*J021^2 + A21(5)*J021*J031 + A21(3)*J031^2)*R.^2)/(2*detJ0) - ((A21(1)*J011*J013^2*J022 - A21(1)*J012*J013^2*J021 + A21(2)*J011*J022*J023^2 - A21(2)*J012*J021*J023^2 - A21(3)*J011*J022*J033^2 + A21(3)*J012*J021*J033^2 + A21(5)*J011*J023^2*J032 - A21(5)*J012*J023^2*J031 - A21(6)*J013^2*J021*J032 + A21(6)*J013^2*J022*J031 + A21(4)*J011*J013*J022*J023 - A21(4)*J012*J013*J021*J023 + 2*A21(3)*J011*J023*J032*J033 - 2*A21(3)*J012*J023*J031*J033 - 2*A21(3)*J013*J021*J032*J033 + 2*A21(3)*J013*J022*J031*J033 - A21(5)*J013*J021*J023*J032 + A21(5)*J013*J022*J023*J031 + A21(6)*J011*J013*J023*J032 - A21(6)*J012*J013*J023*J031)*T.^2)/(2*detJ0);

dHat = zeros(24, 24);
dHat(1:3:end, :) = [ones(8, 1), zeros(8, 1), zeros(8, 1), R.', zeros(8, 1), zeros(8, 1), S.', zeros(8, 1), zeros(8, 1), T.', zeros(8, 1), zeros(8, 1), U13.', U14.', U15.', U16.', U17.', U18.', U19.', U20.', U21.', R.'.*S.'.*T.', zeros(8, 1), zeros(8, 1)];
dHat(2:3:end, :) = [zeros(8, 1), ones(8, 1), zeros(8, 1), zeros(8, 1), R.', zeros(8, 1), zeros(8, 1), S.', zeros(8, 1), zeros(8, 1), T.', zeros(8, 1), V13.', V14.', V15.', V16.', V17.', V18.', V19.', V20.', V21.', zeros(8, 1), R.'.*S.'.*T.', zeros(8, 1)];
dHat(3:3:end, :) = [zeros(8, 1), zeros(8, 1), ones(8, 1), zeros(8, 1), zeros(8, 1), R.', zeros(8, 1), zeros(8, 1), S.', zeros(8, 1), zeros(8, 1), T.', W13.', W14.', W15.', W16.', W17.', W18.', W19.', W20.', W21.', zeros(8, 1), zeros(8, 1), R.'.*S.'.*T.'];
end
% Generated by ADiMat 0.6.6-5530 (00419e1f)
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2018 Johannes Willkomm <johannes@johannes-willkomm.de>
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to johannes@johannes-willkomm.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Parameters:
%  - dependents=Re
%  - independents=uN1, k, dimension, J, dNrAll, DMat, gaussWeight
%  - inputEncoding=ISO-8859-1
%
% Functions in this file: a_gaussDisplacementHookeEnpoint, rec_gaussDisplacementHookeEnpoint,
%  ret_gaussDisplacementHookeEnpoint
%

function [a_uN1 a_k a_dimension a_J a_dNrAll a_DMat a_gaussWeight nr_Re] = a_gaussDisplacementHookeEnpoint(uN1, k, dimension, J, dNrAll, DMat, gaussWeight, a_Re)
   indx = dimension*k - (dimension - 1) : dimension*k;
   detJ = det(J(:, indx)');
   tmpba1 = 0;
   if detJ < 10*eps
      tmpba1 = 1;
      error('Jacobi determinant equal or less than zero.');
   end
   adimat_push1(tmpba1);
   dNx = J(:, indx)' \ dNrAll(indx, :);
   numberOfNodes = size(dNx, 2);
   numberOfDisplacementDofs = numberOfNodes * dimension;
   numberOfSymmetricVoigtDofs = dimension + (dimension^2 - dimension)/2;
   B = zeros(numberOfSymmetricVoigtDofs, numberOfDisplacementDofs);
   tmplia1 = dNx(1, :);
   adimat_push_index2(B, 1, 1:dimension:adimat_end(B, 2, 2));
   B(1, 1:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(2, :);
   adimat_push_index2(B, 2, 2:dimension:adimat_end(B, 2, 2));
   B(2, 2:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(3, :);
   adimat_push_index2(B, 3, 3:dimension:adimat_end(B, 2, 2));
   B(3, 3:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(2, :);
   adimat_push_index2(B, 4, 1:dimension:adimat_end(B, 2, 2));
   B(4, 1:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(1, :);
   adimat_push_index2(B, 4, 2:dimension:adimat_end(B, 2, 2));
   B(4, 2:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(3, :);
   adimat_push_index2(B, 5, 2:dimension:adimat_end(B, 2, 2));
   B(5, 2:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(2, :);
   adimat_push_index2(B, 5, 3:dimension:adimat_end(B, 2, 2));
   B(5, 3:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(3, :);
   adimat_push_index2(B, 6, 1:dimension:adimat_end(B, 2, 2));
   B(6, 1:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(1, :);
   adimat_push_index2(B, 6, 3:dimension:adimat_end(B, 2, 2));
   B(6, 3:dimension:end) = tmplia1;
   tmpca4 = B' * DMat;
   tmpca3 = tmpca4 * B;
   tmpca2 = tmpca3 * uN1;
   tmpca1 = tmpca2 * detJ;
   Re = tmpca1 * gaussWeight(k);
   nr_Re = Re;
   [a_detJ a_dNx a_B a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_tmplia1 a_uN1 a_k a_dimension a_J a_dNrAll a_DMat a_gaussWeight] = a_zeros(detJ, dNx, B, tmpca1, tmpca2, tmpca3, tmpca4, tmplia1, uN1, k, dimension, J, dNrAll, DMat, gaussWeight);
   if nargin < 8
      a_Re = a_zeros1(Re);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultl(tmpca1, a_Re, gaussWeight(k)));
   a_gaussWeight = adimat_adjsum(a_gaussWeight, adimat_adjsubsref(gaussWeight, adimat_adjmultr(gaussWeight(k), tmpca1, a_Re), k));
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultl(tmpca2, a_tmpca1, detJ));
   a_detJ = adimat_adjsum(a_detJ, adimat_adjmultr(detJ, tmpca2, a_tmpca1));
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjmultl(tmpca3, a_tmpca2, uN1));
   a_uN1 = adimat_adjsum(a_uN1, adimat_adjmultr(uN1, tmpca3, a_tmpca2));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjmultl(tmpca4, a_tmpca3, B));
   a_B = adimat_adjsum(a_B, adimat_adjmultr(B, tmpca4, a_tmpca3));
   a_B = adimat_adjsum(a_B, a_ctranspose(adimat_adjmultl(B', a_tmpca4, DMat), B));
   a_DMat = adimat_adjsum(a_DMat, adimat_adjmultr(DMat, B', a_tmpca4));
   B = adimat_pop_index2(B, 6, 3:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 6, 3:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 6, 3:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 1, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 6, 1:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 6, 1:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 6, 1:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 3, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 5, 3:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 5, 3:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 5, 3:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 2, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 5, 2:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 5, 2:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 5, 2:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 3, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 4, 2:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 4, 2:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 4, 2:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 1, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 4, 1:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 4, 1:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 4, 1:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 2, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 3, 3:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 3, 3:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 3, 3:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 3, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 2, 2:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 2, 2:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 2, 2:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 2, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 1, 1:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 1, 1:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 1, 1:dimension:adimat_end(B, 2, 2));
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 1, ':'));
   [tmpadjc1 tmpadjc2] = adimat_a_mldivide(J(:, indx)', dNrAll(indx, :), a_dNx);
   a_J = adimat_adjsum(a_J, adimat_adjsubsref(J, a_ctranspose(tmpadjc1, J(:, indx)), ':', indx));
   a_dNrAll = adimat_adjsum(a_dNrAll, adimat_adjsubsref(dNrAll, tmpadjc2, indx, ':'));
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      error('Jacobi determinant equal or less than zero.');
   end
   a_J = adimat_adjsum(a_J, adimat_adjsubsref(J, a_ctranspose(a_detJ * det(J(:, indx)') * inv(J(:, indx)').', J(:, indx)), ':', indx));
end

function Re = rec_gaussDisplacementHookeEnpoint(uN1, k, dimension, J, dNrAll, DMat, gaussWeight)
   indx = dimension*k - (dimension - 1) : dimension*k;
   detJ = det(J(:, indx)');
   tmpba1 = 0;
   if detJ < 10*eps
      tmpba1 = 1;
      error('Jacobi determinant equal or less than zero.');
   end
   adimat_push1(tmpba1);
   dNx = J(:, indx)' \ dNrAll(indx, :);
   numberOfNodes = size(dNx, 2);
   numberOfDisplacementDofs = numberOfNodes * dimension;
   numberOfSymmetricVoigtDofs = dimension + (dimension^2 - dimension)/2;
   B = zeros(numberOfSymmetricVoigtDofs, numberOfDisplacementDofs);
   tmplia1 = dNx(1, :);
   adimat_push_index2(B, 1, 1:dimension:adimat_end(B, 2, 2));
   B(1, 1:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(2, :);
   adimat_push_index2(B, 2, 2:dimension:adimat_end(B, 2, 2));
   B(2, 2:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(3, :);
   adimat_push_index2(B, 3, 3:dimension:adimat_end(B, 2, 2));
   B(3, 3:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(2, :);
   adimat_push_index2(B, 4, 1:dimension:adimat_end(B, 2, 2));
   B(4, 1:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(1, :);
   adimat_push_index2(B, 4, 2:dimension:adimat_end(B, 2, 2));
   B(4, 2:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(3, :);
   adimat_push_index2(B, 5, 2:dimension:adimat_end(B, 2, 2));
   B(5, 2:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(2, :);
   adimat_push_index2(B, 5, 3:dimension:adimat_end(B, 2, 2));
   B(5, 3:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(3, :);
   adimat_push_index2(B, 6, 1:dimension:adimat_end(B, 2, 2));
   B(6, 1:dimension:end) = tmplia1;
   adimat_push1(tmplia1);
   tmplia1 = dNx(1, :);
   adimat_push_index2(B, 6, 3:dimension:adimat_end(B, 2, 2));
   B(6, 3:dimension:end) = tmplia1;
   tmpca4 = B' * DMat;
   tmpca3 = tmpca4 * B;
   tmpca2 = tmpca3 * uN1;
   tmpca1 = tmpca2 * detJ;
   Re = tmpca1 * gaussWeight(k);
   adimat_push(indx, detJ, dNx, numberOfNodes, numberOfDisplacementDofs, numberOfSymmetricVoigtDofs, B, tmpca1, tmpca2, tmpca3, tmpca4, tmplia1, Re, uN1, k, dimension, J, dNrAll, DMat, gaussWeight);
end

function [a_uN1 a_k a_dimension a_J a_dNrAll a_DMat a_gaussWeight] = ret_gaussDisplacementHookeEnpoint(a_Re)
   [gaussWeight DMat dNrAll J dimension k uN1 Re tmplia1 tmpca4 tmpca3 tmpca2 tmpca1 B numberOfSymmetricVoigtDofs numberOfDisplacementDofs numberOfNodes dNx detJ indx] = adimat_pop;
   [a_detJ a_dNx a_B a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_tmplia1 a_uN1 a_k a_dimension a_J a_dNrAll a_DMat a_gaussWeight] = a_zeros(detJ, dNx, B, tmpca1, tmpca2, tmpca3, tmpca4, tmplia1, uN1, k, dimension, J, dNrAll, DMat, gaussWeight);
   if nargin < 1
      a_Re = a_zeros1(Re);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultl(tmpca1, a_Re, gaussWeight(k)));
   a_gaussWeight = adimat_adjsum(a_gaussWeight, adimat_adjsubsref(gaussWeight, adimat_adjmultr(gaussWeight(k), tmpca1, a_Re), k));
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultl(tmpca2, a_tmpca1, detJ));
   a_detJ = adimat_adjsum(a_detJ, adimat_adjmultr(detJ, tmpca2, a_tmpca1));
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjmultl(tmpca3, a_tmpca2, uN1));
   a_uN1 = adimat_adjsum(a_uN1, adimat_adjmultr(uN1, tmpca3, a_tmpca2));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjmultl(tmpca4, a_tmpca3, B));
   a_B = adimat_adjsum(a_B, adimat_adjmultr(B, tmpca4, a_tmpca3));
   a_B = adimat_adjsum(a_B, a_ctranspose(adimat_adjmultl(B', a_tmpca4, DMat), B));
   a_DMat = adimat_adjsum(a_DMat, adimat_adjmultr(DMat, B', a_tmpca4));
   B = adimat_pop_index2(B, 6, 3:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 6, 3:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 6, 3:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 1, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 6, 1:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 6, 1:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 6, 1:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 3, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 5, 3:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 5, 3:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 5, 3:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 2, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 5, 2:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 5, 2:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 5, 2:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 3, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 4, 2:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 4, 2:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 4, 2:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 1, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 4, 1:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 4, 1:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 4, 1:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 2, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 3, 3:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 3, 3:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 3, 3:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 3, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 2, 2:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 2, 2:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 2, 2:dimension:adimat_end(B, 2, 2));
   tmplia1 = adimat_pop1;
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 2, ':'));
   a_tmplia1 = a_zeros1(tmplia1);
   B = adimat_pop_index2(B, 1, 1:dimension:adimat_end(B, 2, 2));
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjsubsasgn(a_B, tmplia1, 1, 1:dimension:adimat_end(B, 2, 2)));
   a_B = a_zeros_index2(a_B, B, 1, 1:dimension:adimat_end(B, 2, 2));
   a_dNx = adimat_adjsum(a_dNx, adimat_adjsubsref(dNx, a_tmplia1, 1, ':'));
   [tmpadjc1 tmpadjc2] = adimat_a_mldivide(J(:, indx)', dNrAll(indx, :), a_dNx);
   a_J = adimat_adjsum(a_J, adimat_adjsubsref(J, a_ctranspose(tmpadjc1, J(:, indx)), ':', indx));
   a_dNrAll = adimat_adjsum(a_dNrAll, adimat_adjsubsref(dNrAll, tmpadjc2, indx, ':'));
   tmpba1 = adimat_pop1;
   if tmpba1 == 1
      error('Jacobi determinant equal or less than zero.');
   end
   a_J = adimat_adjsum(a_J, adimat_adjsubsref(J, a_ctranspose(a_detJ * det(J(:, indx)') * inv(J(:, indx)').', J(:, indx)), ':', indx));
end

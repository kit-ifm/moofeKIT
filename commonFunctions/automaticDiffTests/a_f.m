% Generated by ADiMat 0.6.6-5530 (00419e1f)
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2018 Johannes Willkomm <johannes@johannes-willkomm.de>
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to johannes@johannes-willkomm.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Parameters:
%  - dependents=r
%  - independents=x, c
%  - inputEncoding=ISO-8859-1
%
% Functions in this file: a_f, rec_f,
%  ret_f
%

function [a_x a_c nr_r] = a_f(x, c, a_r)
   tmpca1 = 0;
   tmpca2 = 0;
   r = 0;
   powerOfX = 1;
   tmpfra1_2 = length(c);
   for i=1 : tmpfra1_2
      adimat_push1(tmpca2);
      tmpca2 = c(i) * powerOfX;
      adimat_push1(tmpca1);
      tmpca1 = r;
      adimat_push1(r);
      r = tmpca1 + tmpca2;
      adimat_push1(tmpca1);
      tmpca1 = powerOfX;
      adimat_push1(powerOfX);
      powerOfX = tmpca1 * x;
   end
   adimat_push1(tmpfra1_2);
   nr_r = r;
   [a_powerOfX a_tmpca1 a_tmpca2 a_x a_c] = a_zeros(powerOfX, tmpca1, tmpca2, x, c);
   if nargin < 3
      a_r = a_zeros1(r);
   end
   tmpfra1_2 = adimat_pop1;
   for i=fliplr(1 : tmpfra1_2)
      powerOfX = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultl(tmpca1, a_powerOfX, x));
      a_x = adimat_adjsum(a_x, adimat_adjmultr(x, tmpca1, a_powerOfX));
      a_powerOfX = a_zeros1(powerOfX);
      tmpca1 = adimat_pop1;
      a_powerOfX = adimat_adjsum(a_powerOfX, a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      r = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_r));
      a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_r));
      a_r = a_zeros1(r);
      tmpca1 = adimat_pop1;
      a_r = adimat_adjsum(a_r, a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_c = adimat_adjsum(a_c, adimat_adjsubsref(c, adimat_adjmultl(c(i), a_tmpca2, powerOfX), i));
      a_powerOfX = adimat_adjsum(a_powerOfX, adimat_adjmultr(powerOfX, c(i), a_tmpca2));
      a_tmpca2 = a_zeros1(tmpca2);
   end
end

function r = rec_f(x, c)
   tmpca1 = 0;
   tmpca2 = 0;
   r = 0;
   powerOfX = 1;
   tmpfra1_2 = length(c);
   for i=1 : tmpfra1_2
      adimat_push1(tmpca2);
      tmpca2 = c(i) * powerOfX;
      adimat_push1(tmpca1);
      tmpca1 = r;
      adimat_push1(r);
      r = tmpca1 + tmpca2;
      adimat_push1(tmpca1);
      tmpca1 = powerOfX;
      adimat_push1(powerOfX);
      powerOfX = tmpca1 * x;
   end
   adimat_push(tmpfra1_2, powerOfX, i, tmpca1, tmpca2, r, x, c);
end

function [a_x a_c] = ret_f(a_r)
   [c x r tmpca2 tmpca1 i powerOfX] = adimat_pop;
   [a_powerOfX a_tmpca1 a_tmpca2 a_x a_c] = a_zeros(powerOfX, tmpca1, tmpca2, x, c);
   if nargin < 1
      a_r = a_zeros1(r);
   end
   tmpfra1_2 = adimat_pop1;
   for i=fliplr(1 : tmpfra1_2)
      powerOfX = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultl(tmpca1, a_powerOfX, x));
      a_x = adimat_adjsum(a_x, adimat_adjmultr(x, tmpca1, a_powerOfX));
      a_powerOfX = a_zeros1(powerOfX);
      tmpca1 = adimat_pop1;
      a_powerOfX = adimat_adjsum(a_powerOfX, a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      r = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_r));
      a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, a_r));
      a_r = a_zeros1(r);
      tmpca1 = adimat_pop1;
      a_r = adimat_adjsum(a_r, a_tmpca1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_c = adimat_adjsum(a_c, adimat_adjsubsref(c, adimat_adjmultl(c(i), a_tmpca2, powerOfX), i));
      a_powerOfX = adimat_adjsum(a_powerOfX, adimat_adjmultr(powerOfX, c(i), a_tmpca2));
      a_tmpca2 = a_zeros1(tmpca2);
   end
end
